import { body, param, query, validationResult } from 'express-validator'
import { Request, Response, NextFunction } from 'express'
import validator from 'validator'
import { PrismaClient } from '@prisma/client'
import { getCachedTenantTimezone } from '../utils/tenant'
import { getStartOfDayInTimezone } from '../utils/timezone'

const prisma = new PrismaClient()

// Middleware pro handling validation errors
export const handleValidationErrors = (req: Request, res: Response, next: NextFunction) => {
  const errors = validationResult(req)
  if (!errors.isEmpty()) {
    console.log('üö´ Validation failed:', errors.array())
    return res.status(400).json({
      error: 'Neplatn√° data',
      details: errors.array().map(err => ({
        field: err.type === 'field' ? err.path : 'unknown',
        message: err.msg
      }))
    })
  }
  next()
}

// Validace pro vytvo≈ôen√≠ rezervace
export const validateCreateReservation = [
  body('slotId')
    .isString()
    .isLength({ min: 1, max: 100 })
    .withMessage('SlotId je povinn√Ω a mus√≠ b√Ωt platn√Ω string'),
  
  body('petName')
    .optional()
    .isString()
    .isLength({ min: 1, max: 100 })
    .custom((value) => {
      // XSS ochrana - nepovol√≠ HTML tagy
      if (value && value !== validator.escape(value)) {
        throw new Error('Jm√©no zv√≠≈ôete obsahuje nepovolen√© znaky')
      }
      return true
    })
    .withMessage('Jm√©no zv√≠≈ôete mus√≠ b√Ωt 1-100 znak≈Ø a nesm√≠ obsahovat HTML'),
  
  body('petType')
    .optional()
    .isString()
    .isLength({ min: 1, max: 50 })
    .isIn(['pes', 'koƒçka', 'kr√°l√≠k', 'pt√°k', 'hlodavec', 'plaz', 'jin√©'])
    .withMessage('Druh zv√≠≈ôete mus√≠ b√Ωt z povolen√©ho seznamu'),
  
  body('description')
    .optional()
    .isString()
    .isLength({ max: 1000 })
    .custom((value) => {
      if (value && value !== validator.escape(value)) {
        throw new Error('Popis obsahuje nepovolen√© znaky')
      }
      return true
    })
    .withMessage('Popis nesm√≠ b√Ωt del≈°√≠ ne≈æ 1000 znak≈Ø a nesm√≠ obsahovat HTML'),
  
  body('phone')
    .optional()
    .isString()
    .isLength({ max: 20 })
    .custom((value) => {
      if (value) {
        // Odebereme mezery, pomlƒçky a z√°vorky pro validaci
        const cleaned = value.replace(/[\s\-\(\)]/g, '')
        
        // Kontrola z√°kladn√≠ d√©lky
        if (cleaned.length < 7) {
          throw new Error('Telefonn√≠ ƒç√≠slo je p≈ô√≠li≈° kr√°tk√©. Minim√°lnƒõ 7 ƒç√≠slic.')
        }
        
        if (cleaned.length > 15) {
          throw new Error('Telefonn√≠ ƒç√≠slo je p≈ô√≠li≈° dlouh√©. Maxim√°lnƒõ 15 ƒç√≠slic.')
        }
        
        // Kontrola, ≈æe obsahuje pouze ƒç√≠slice a povolen√© znaky
        if (!/^[\+\d]+$/.test(cleaned)) {
          throw new Error('Telefonn√≠ ƒç√≠slo m≈Ø≈æe obsahovat pouze ƒç√≠slice a znak +.')
        }
        
        // ƒåesk√© telefonn√≠ ƒç√≠slo - r≈Øzn√© form√°ty
        const czechPatterns = [
          /^[67]\d{8}$/,                    // 777456789 (9 ƒç√≠slic, zaƒç√≠n√° 6 nebo 7)
          /^0[67]\d{8}$/,                   // 0777456789 (10 ƒç√≠slic, zaƒç√≠n√° 06 nebo 07)
          /^\+420[67]\d{8}$/,               // +420777456789 (mezin√°rodn√≠ s +)
          /^420[67]\d{8}$/,                 // 420777456789 (mezin√°rodn√≠ bez +)
          /^00420[67]\d{8}$/,               // 00420777456789 (mezin√°rodn√≠ s 00)
        ]
        
        // Mezin√°rodn√≠ ƒç√≠sla (z√°kladn√≠ validace)
        const internationalPattern = /^\+[1-9]\d{6,14}$/
        
        // Odebereme + pro testov√°n√≠ vzor≈Ø bez +
        const cleanedWithoutPlus = cleaned.startsWith('+') ? cleaned.substring(1) : cleaned
        
        // Testujeme ƒçesk√© vzory
        const isCzechValid = czechPatterns.some(pattern => 
          pattern.test(cleaned) || pattern.test(cleanedWithoutPlus)
        )
        
        // Testujeme mezin√°rodn√≠ vzor
        const isInternationalValid = internationalPattern.test(cleaned)
        
        if (!isCzechValid && !isInternationalValid) {
          // Specifick√° diagnostika pro ƒçesk√© ƒç√≠slo
          if (cleaned.length === 9 || cleaned.length === 10 || 
              cleaned.startsWith('420') || cleaned.startsWith('+420') || cleaned.startsWith('00420')) {
            
            // Extrahujeme z√°kladn√≠ ƒç√≠slo pro diagnostiku
            let coreNumber = cleaned
            if (cleaned.startsWith('+420')) coreNumber = cleaned.substring(4)
            else if (cleaned.startsWith('420')) coreNumber = cleaned.substring(3)
            else if (cleaned.startsWith('00420')) coreNumber = cleaned.substring(5)
            else if (cleaned.startsWith('0')) coreNumber = cleaned.substring(1)
            
            if (coreNumber.length !== 9) {
              throw new Error(`ƒåesk√© ƒç√≠slo m√° nespr√°vnou d√©lku. M√° ${coreNumber.length} ƒç√≠slic, ale oƒçek√°v√° se 9. P≈ô√≠klad: 777123456`)
            }
            
            if (!/^[67]/.test(coreNumber)) {
              throw new Error(`ƒåesk√© mobiln√≠ ƒç√≠slo mus√≠ zaƒç√≠nat ƒç√≠slic√≠ 6 nebo 7. Va≈°e ƒç√≠slo zaƒç√≠n√° ${coreNumber[0]}. P≈ô√≠klad: 777123456`)
            }
          }
          
          throw new Error('Neplatn√Ω form√°t telefonn√≠ho ƒç√≠sla. Podporovan√© form√°ty:\n‚Ä¢ ƒåesk√©: 777123456, 0777123456, +420777123456\n‚Ä¢ Mezin√°rodn√≠: +49123456789, +33123456789')
        }
        
        // Dal≈°√≠ validace pro ƒçesk√© ƒç√≠sla
        if (isCzechValid) {
          // Extrahujeme ƒç√≠sla bez p≈ôedvolby pro dodateƒçnou validaciju
          let coreNumber = cleaned
          if (cleaned.startsWith('+420')) coreNumber = cleaned.substring(4)
          else if (cleaned.startsWith('420')) coreNumber = cleaned.substring(3)
          else if (cleaned.startsWith('00420')) coreNumber = cleaned.substring(5)
          else if (cleaned.startsWith('0')) coreNumber = cleaned.substring(1)
          
          // ƒåesk√© mobiln√≠ ƒç√≠sla mus√≠ zaƒç√≠nat 6 nebo 7
          if (coreNumber.length === 9 && !/^[67]/.test(coreNumber)) {
            throw new Error(`ƒåesk√© mobiln√≠ ƒç√≠slo mus√≠ zaƒç√≠nat ƒç√≠slic√≠ 6 nebo 7. Va≈°e ƒç√≠slo zaƒç√≠n√° ${coreNumber[0]}. P≈ô√≠klad: 777123456`)
          }
        }
      }
      return true
    }),
  
  handleValidationErrors
]

// Nov√° validace pro kontrolu ƒçasov√°n√≠ rezervace (pouze pro klienty)
export const validateReservationTiming = async (req: Request, res: Response, next: NextFunction) => {
  try {
    const { slotId } = req.body
    const tenantId = req.user?.tenant
    const userRole = req.user?.role

    if (!slotId || !tenantId) {
      return next() // Z√°kladn√≠ validace se ≈ôe≈°√≠ jinde
    }

    // Pouze klienti maj√≠ omezen√≠ "od z√≠t≈ôka"
    if (userRole !== 'CLIENT') {
      if (process.env.NODE_ENV === 'development') {
        console.log('üïê Validace ƒçasov√°n√≠: DOCTOR/ADMIN - bez omezen√≠')
        console.log('- User role:', userRole)
      }
      return next() // Dokto≈ôi a admini mohou rezervovat kdykoliv
    }

    // Najdi slot a jeho ƒças
    const slot = await prisma.slot.findFirst({
      where: {
        id: slotId,
        tenantId,
      },
      select: {
        startTime: true,
        endTime: true,
      },
    })

    if (!slot) {
      return next() // Existence slotu se ≈ôe≈°√≠ jinde
    }

    // Z√≠skej timezone tenanta
    const tenantTimezone = await getCachedTenantTimezone(prisma, tenantId)
    
    // Z√≠skej zaƒç√°tek z√≠t≈ôej≈°√≠ho dne v tenant timezone
    const now = new Date()
    const tomorrow = new Date(now.getTime() + 24 * 60 * 60 * 1000)
    const tomorrowDateStr = tomorrow.toLocaleDateString('sv-SE', { timeZone: tenantTimezone })
    const tomorrowStartUTC = getStartOfDayInTimezone(tomorrowDateStr, tenantTimezone)

    if (process.env.NODE_ENV === 'development') {
      console.log('üïê Validace ƒçasov√°n√≠ rezervace (CLIENT):')
      console.log('- User role:', userRole)
      console.log('- Aktu√°ln√≠ ƒças:', now.toISOString())
      console.log('- Tenant timezone:', tenantTimezone)
      console.log('- Z√≠t≈ôej≈°√≠ datum:', tomorrowDateStr)
      console.log('- Zaƒç√°tek z√≠t≈ôka UTC:', tomorrowStartUTC.toISOString())
      console.log('- Slot zaƒç√≠n√°:', slot.startTime.toISOString())
      console.log('- Slot je od z√≠t≈ôka:', slot.startTime >= tomorrowStartUTC)
    }

    // Kontrola, ≈æe slot je nejd≈ô√≠ve od z√≠t≈ôka (pouze pro klienty)
    if (slot.startTime < tomorrowStartUTC) {
      const slotDateInTimezone = slot.startTime.toLocaleDateString('cs-CZ', { 
        timeZone: tenantTimezone,
        weekday: 'long',
        year: 'numeric',
        month: 'long',
        day: 'numeric'
      })
      
      return res.status(400).json({ 
        error: `Rezervace lze vytv√°≈ôet nejd≈ô√≠ve od n√°sleduj√≠c√≠ho dne. Vybran√Ω term√≠n (${slotDateInTimezone}) je p≈ô√≠li≈° brzy. Pros√≠m vyberte term√≠n od z√≠t≈ôka.` 
      })
    }

    next()
  } catch (error) {
    console.error('Chyba p≈ôi validaci ƒçasov√°n√≠ rezervace:', error)
    return res.status(500).json({ error: 'Intern√≠ chyba serveru p≈ôi validaci ƒçasu' })
  }
}

// Validace pro vytvo≈ôen√≠ slotu
export const validateCreateSlot = [
  body('startTime')
    .isISO8601()
    .withMessage('ƒåas zaƒç√°tku mus√≠ b√Ωt platn√Ω ISO8601 datum'),
  
  body('endTime')
    .isISO8601()
    .withMessage('ƒåas konce mus√≠ b√Ωt platn√Ω ISO8601 datum')
    .custom((endTime, { req }) => {
      const startTime = new Date(req.body.startTime)
      const end = new Date(endTime)
      
      if (end <= startTime) {
        throw new Error('ƒåas konce mus√≠ b√Ωt po ƒçasu zaƒç√°tku')
      }
      
      // Max 8 hodin na slot
      const maxDuration = 8 * 60 * 60 * 1000 // 8 hodin v ms
      if (end.getTime() - startTime.getTime() > maxDuration) {
        throw new Error('Slot nesm√≠ b√Ωt del≈°√≠ ne≈æ 8 hodin')
      }
      
      return true
    }),
  
  body('equipment')
    .optional()
    .isString()
    .isLength({ max: 500 })
    .custom((value) => {
      if (value && value !== validator.escape(value)) {
        throw new Error('Vybaven√≠ obsahuje nepovolen√© znaky')
      }
      return true
    })
    .withMessage('Vybaven√≠ nesm√≠ b√Ωt del≈°√≠ ne≈æ 500 znak≈Ø'),
  
  body('roomId')
    .optional()
    .isString()
    .isLength({ min: 1, max: 100 })
    .withMessage('RoomId mus√≠ b√Ωt platn√Ω string'),
  
  body('serviceTypeId')
    .optional()
    .isString()
    .isLength({ min: 1, max: 100 })
    .withMessage('ServiceTypeId mus√≠ b√Ωt platn√Ω string'),
  
  handleValidationErrors
]

// Validace pro bulk generov√°n√≠ slot≈Ø
export const validateBulkSlotGeneration = [
  body('weekdays')
    .isArray({ min: 1, max: 7 })
    .withMessage('Dny v t√Ωdnu mus√≠ b√Ωt pole s 1-7 prvky')
    .custom((weekdays) => {
      if (!weekdays.every((day: any) => Number.isInteger(day) && day >= 0 && day <= 6)) {
        throw new Error('Dny v t√Ωdnu mus√≠ b√Ωt ƒç√≠sla 0-6')
      }
      return true
    }),
  
  body('startTime')
    .matches(/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/)
    .withMessage('ƒåas zaƒç√°tku mus√≠ b√Ωt ve form√°tu HH:MM'),
  
  body('endTime')
    .matches(/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/)
    .withMessage('ƒåas konce mus√≠ b√Ωt ve form√°tu HH:MM')
    .custom((endTime, { req }) => {
      const [startHour, startMin] = req.body.startTime.split(':').map(Number)
      const [endHour, endMin] = endTime.split(':').map(Number)
      
      const startMinutes = startHour * 60 + startMin
      const endMinutes = endHour * 60 + endMin
      
      if (endMinutes <= startMinutes) {
        throw new Error('ƒåas konce mus√≠ b√Ωt po ƒçasu zaƒç√°tku')
      }
      
      return true
    }),
  
  body('interval')
    .isInt({ min: 0, max: 480 })
    .withMessage('Interval mus√≠ b√Ωt ƒç√≠slo mezi 0-480 minutami'),
  
  body('weeksCount')
    .isInt({ min: 1, max: 26 }) // Sn√≠≈æeno z 52 na 26 pro bezpeƒçnost
    .withMessage('Poƒçet t√Ωdn≈Ø mus√≠ b√Ωt mezi 1-26'),
  
  body('startDate')
    .isISO8601()
    .withMessage('Datum zaƒç√°tku mus√≠ b√Ωt platn√Ω ISO8601 datum')
    .custom((startDate) => {
      const date = new Date(startDate)
      const now = new Date()
      const maxFuture = new Date()
      maxFuture.setFullYear(now.getFullYear() + 1) // Max rok dop≈ôedu
      
      if (date < now) {
        throw new Error('Datum zaƒç√°tku nem≈Ø≈æe b√Ωt v minulosti')
      }
      
      if (date > maxFuture) {
        throw new Error('Datum zaƒç√°tku nem≈Ø≈æe b√Ωt v√≠ce ne≈æ rok dop≈ôedu')
      }
      
      return true
    }),
  
  body('breakTimes')
    .optional()
    .isArray({ max: 10 })
    .withMessage('P≈ôest√°vky mus√≠ b√Ωt pole s max 10 prvky')
    .custom((breakTimes) => {
      if (breakTimes) {
        for (const breakTime of breakTimes) {
          if (!breakTime.start || !breakTime.end) {
            throw new Error('Ka≈æd√° p≈ôest√°vka mus√≠ m√≠t start a end')
          }
          if (!/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/.test(breakTime.start) ||
              !/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/.test(breakTime.end)) {
            throw new Error('ƒåasy p≈ôest√°vek mus√≠ b√Ωt ve form√°tu HH:MM')
          }
        }
      }
      return true
    }),
  
  body('doctorId')
    .optional()
    .isString()
    .isLength({ min: 1, max: 100 })
    .withMessage('DoctorId mus√≠ b√Ωt platn√Ω string'),
  
  handleValidationErrors
]

// Validace pro aktualizaci statusu rezervace
export const validateUpdateReservationStatus = [
  param('id')
    .isString()
    .isLength({ min: 1, max: 100 })
    .withMessage('ID rezervace mus√≠ b√Ωt platn√Ω string'),
  
  body('status')
    .isIn(['PENDING', 'CONFIRMED', 'CANCELLED', 'COMPLETED'])
    .withMessage('Status mus√≠ b√Ωt jeden z: PENDING, CONFIRMED, CANCELLED, COMPLETED'),
  
  body('notes')
    .optional()
    .isString()
    .isLength({ max: 2000 })
    .custom((value) => {
      if (value && value !== validator.escape(value)) {
        throw new Error('Pozn√°mky obsahuj√≠ nepovolen√© znaky')
      }
      return true
    })
    .withMessage('Pozn√°mky nesm√≠ b√Ωt del≈°√≠ ne≈æ 2000 znak≈Ø'),
  
  handleValidationErrors
]

// Validace pro vytvo≈ôen√≠ room/service type
export const validateCreateRoom = [
  body('name')
    .isString()
    .isLength({ min: 1, max: 100 })
    .custom((value) => {
      if (value !== validator.escape(value)) {
        throw new Error('N√°zev obsahuje nepovolen√© znaky')
      }
      return true
    })
    .withMessage('N√°zev je povinn√Ω, 1-100 znak≈Ø, bez HTML'),
  
  body('description')
    .optional()
    .isString()
    .isLength({ max: 500 })
    .custom((value) => {
      if (value && value !== validator.escape(value)) {
        throw new Error('Popis obsahuje nepovolen√© znaky')
      }
      return true
    })
    .withMessage('Popis nesm√≠ b√Ωt del≈°√≠ ne≈æ 500 znak≈Ø'),
  
  body('capacity')
    .optional()
    .isInt({ min: 1, max: 100 })
    .withMessage('Kapacita mus√≠ b√Ωt ƒç√≠slo mezi 1-100'),
  
  body('isActive')
    .optional()
    .isBoolean()
    .withMessage('IsActive mus√≠ b√Ωt boolean'),
  
  handleValidationErrors
]

// Validace pro vytvo≈ôen√≠ service type
export const validateCreateServiceType = [
  body('name')
    .isString()
    .isLength({ min: 1, max: 100 })
    .custom((value) => {
      if (value !== validator.escape(value)) {
        throw new Error('N√°zev obsahuje nepovolen√© znaky')
      }
      return true
    })
    .withMessage('N√°zev je povinn√Ω, 1-100 znak≈Ø, bez HTML'),
  
  body('description')
    .optional()
    .isString()
    .isLength({ max: 500 })
    .custom((value) => {
      if (value && value !== validator.escape(value)) {
        throw new Error('Popis obsahuje nepovolen√© znaky')
      }
      return true
    })
    .withMessage('Popis nesm√≠ b√Ωt del≈°√≠ ne≈æ 500 znak≈Ø'),
  
  body('duration')
    .optional()
    .isInt({ min: 5, max: 480 })
    .withMessage('D√©lka mus√≠ b√Ωt mezi 5-480 minutami'),
  
  body('durationMinutes')
    .optional()
    .isInt({ min: 5, max: 480 })
    .withMessage('D√©lka mus√≠ b√Ωt mezi 5-480 minutami'),
  
  body('price')
    .optional()
    .isFloat({ min: 0, max: 999999 })
    .withMessage('Cena mus√≠ b√Ωt kladn√© ƒç√≠slo do 999999'),
  
  body('color')
    .optional()
    .matches(/^#[0-9A-Fa-f]{6}$/)
    .withMessage('Barva mus√≠ b√Ωt platn√Ω hex k√≥d (#RRGGBB)'),
  
  body('isActive')
    .optional()
    .isBoolean()
    .withMessage('IsActive mus√≠ b√Ωt boolean'),
  
  handleValidationErrors
]

// Validace pro query parametry
export const validateQueryParams = [
  query('status')
    .optional()
    .isIn(['PENDING', 'CONFIRMED', 'CANCELLED', 'COMPLETED'])
    .withMessage('Status mus√≠ b√Ωt jeden z povolen√Ωch'),
  
  query('doctorId')
    .optional()
    .isString()
    .isLength({ min: 1, max: 100 })
    .withMessage('DoctorId mus√≠ b√Ωt platn√Ω string'),
  
  query('date')
    .optional()
    .isDate()
    .withMessage('Datum mus√≠ b√Ωt platn√©'),
  
  handleValidationErrors
] 