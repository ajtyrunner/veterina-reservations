import { Router, Request, Response, NextFunction } from 'express'
import { PrismaClient } from '@prisma/client'
import bcrypt from 'bcryptjs'
import { 
  bruteForceProtection, 
  validateAuthInput, 
  auditLog,
  enforceSecureSession 
} from '../middleware/authSecurity'

const router = Router()
const prisma = new PrismaClient()

// Validace pro username-based p≈ôihl√°≈°en√≠
const validateCredentialsInput = (req: Request, res: Response, next: NextFunction) => {
  const { username, tenantSlug } = req.body
  
  // Username validace
  if (!username || typeof username !== 'string') {
    return res.status(400).json({ error: 'Username je povinn√Ω' })
  }
  
  if (username.length < 3 || username.length > 50) {
    return res.status(400).json({ error: 'Username mus√≠ m√≠t 3-50 znak≈Ø' })
  }
  
  // Form√°t: jmeno.prijmeni - pouze mal√° p√≠smena, ƒç√≠sla, teƒçky a pomlƒçky
  if (!/^[a-z0-9.-]+$/.test(username)) {
    return res.status(400).json({ error: 'Username m≈Ø≈æe obsahovat pouze mal√° p√≠smena, ƒç√≠sla, teƒçky a pomlƒçky' })
  }
  
  // Nesm√≠ zaƒç√≠nat nebo konƒçit teƒçkou/pomlƒçkou
  if (/^[.-]|[.-]$/.test(username)) {
    return res.status(400).json({ error: 'Username nesm√≠ zaƒç√≠nat nebo konƒçit teƒçkou ƒçi pomlƒçkou' })
  }
  
  // TenantSlug validace
  if (tenantSlug && (typeof tenantSlug !== 'string' || !/^[a-z0-9-]+$/.test(tenantSlug))) {
    return res.status(400).json({ error: 'Neplatn√Ω slug ordinace' })
  }
  
  console.log(`‚úÖ Username validated: ${username}`)
  next()
}

// Endpoint pro NextAuth credentials ovƒõ≈ôen√≠
router.post('/credentials', 
  enforceSecureSession,
  validateCredentialsInput,
  bruteForceProtection, 
  async (req, res) => {
  console.log('üîê AUTH REQUEST:', {
    username: req.body.username,
    tenantSlug: req.body.tenantSlug,
    hasPassword: !!req.body.password
  })
  
  try {
    const { username, password, tenantSlug } = req.body
    
    // Preferuj x-tenant-slug hlaviƒçku, jinak pou≈æij tenantSlug z body
    const actualTenantSlug = req.headers['x-tenant-slug'] as string || tenantSlug

    if (!username || !password) {
      console.log('‚ùå Chyb√≠ username nebo heslo')
      return res.status(400).json({ error: 'Username a heslo jsou povinn√©' })
    }

    console.log('üîê Using tenant slug:', actualTenantSlug, 'from:', req.headers['x-tenant-slug'] ? 'header' : 'body')

    // Najdi tenant nejprve
    const tenant = await prisma.tenant.findUnique({
      where: { slug: actualTenantSlug },
      select: { id: true, slug: true }
    })

    if (!tenant) {
      console.log('‚ùå Tenant not found:', actualTenantSlug)
      auditLog('LOGIN_FAILED', { username, reason: 'tenant_not_found', tenantSlug }, req)
      res.locals.trackFailedAttempt?.()
      return res.status(401).json({ error: 'Neplatn√© p≈ôihla≈°ovac√≠ √∫daje' })
    }

    // Najdi u≈æivatele podle username a tenant (pouze INTERNAL provider)
    const userRecord = await prisma.user.findFirst({
      where: { 
        username: username,
        tenantId: tenant.id,
        authProvider: 'INTERNAL',
        isActive: true
      },
      include: {
        tenant: {
          select: {
            slug: true
          }
        }
      }
    })
    
    console.log('üîç User found:', userRecord ? 'YES' : 'NO')

    if (!userRecord || !userRecord.password) {
      console.log('‚ùå User not found or no password')
      // Zaloguj ne√∫spƒõ≈°n√Ω pokus
      auditLog('LOGIN_FAILED', { username, reason: 'user_not_found', tenantSlug }, req)
      res.locals.trackFailedAttempt?.()
      return res.status(401).json({ error: 'Neplatn√© p≈ôihla≈°ovac√≠ √∫daje' })
    }

    // Ovƒõ≈ô heslo
    if (process.env.NODE_ENV === 'development') {
      console.log('üîë Checking password...')
    }
    const passwordMatch = await bcrypt.compare(password, userRecord.password)
    if (process.env.NODE_ENV === 'development') {
      console.log('üîë Password match:', passwordMatch ? 'YES' : 'NO')
    }
    
    if (!passwordMatch) {
      if (process.env.NODE_ENV === 'development') {
        console.log('‚ùå Password mismatch')
      }
      // Zaloguj ne√∫spƒõ≈°n√Ω pokus
      auditLog('LOGIN_FAILED', { username, reason: 'password_mismatch', tenantSlug }, req)
      res.locals.trackFailedAttempt?.()
      return res.status(401).json({ error: 'Neplatn√© p≈ôihla≈°ovac√≠ √∫daje' })
    }

    // Pouze dokto≈ôi a admini m≈Ø≈æou pou≈æ√≠vat credentials
    if (userRecord.role !== 'DOCTOR' && userRecord.role !== 'ADMIN') {
      auditLog('LOGIN_FAILED', { username, reason: 'insufficient_permissions', role: userRecord.role, tenantSlug }, req)
      res.locals.trackFailedAttempt?.()
      return res.status(403).json({ error: 'Nedostateƒçn√° opr√°vnƒõn√≠' })
    }

    // Aktualizuj auditn√≠ informace p≈ôi √∫spƒõ≈°n√©m p≈ôihl√°≈°en√≠
    const clientIp = req.ip || req.socket.remoteAddress || req.headers['x-forwarded-for'] as string || 'unknown'
    
    await prisma.user.update({
      where: { id: userRecord.id },
      data: {
        lastLoginAt: new Date(),
        lastLoginIp: clientIp,
        loginCount: {
          increment: 1
        }
      }
    })

    // √öspƒõ≈°n√© p≈ôihl√°≈°en√≠ - clear failed attempts a zaloguj
    res.locals.clearFailedAttempts?.()
    auditLog('LOGIN_SUCCESS', { 
      username, 
      role: userRecord.role, 
      tenant: userRecord.tenant.slug,
      ip: clientIp
    }, req)
    
    // Vra≈• √∫daje pro NextAuth
    console.log('‚úÖ Auth successful for:', userRecord.username)
    res.json({
      id: userRecord.id,
      email: userRecord.email,
      username: userRecord.username,
      name: userRecord.name,
      image: userRecord.image,
      role: userRecord.role,
      tenant: userRecord.tenant.slug,
      tenantId: userRecord.tenantId,
    })
  } catch (error) {
    console.error('Chyba p≈ôi ovƒõ≈ôov√°n√≠ credentials:', error)
    res.status(500).json({ error: 'Intern√≠ chyba serveru' })
  }
})

// Vytvo≈ôen√≠ u≈æivatele pro Google OAuth
router.post('/google-user', async (req, res) => {
  try {
    const { email, name, image, phone, tenantSlug } = req.body
    
    // Preferuj x-tenant-slug hlaviƒçku, jinak pou≈æij tenantSlug z body
    const actualTenantSlug = req.headers['x-tenant-slug'] as string || tenantSlug || 'svahy'

    if (!email) {
      return res.status(400).json({ error: 'Email je povinn√Ω' })
    }

    console.log('üîê Google OAuth - Using tenant slug:', actualTenantSlug, 'from:', req.headers['x-tenant-slug'] ? 'header' : 'body')

    // Najdi tenant
    const tenant = await prisma.tenant.findUnique({
      where: { slug: actualTenantSlug },
    })

    if (!tenant) {
      return res.status(404).json({ error: 'Tenant nenalezen' })
    }

    // Zkontroluj, jestli u≈æivatel u≈æ existuje
    const existingUser = await prisma.user.findFirst({
      where: { 
        email,
        authProvider: 'GOOGLE',
        tenantId: tenant.id
      },
    })

    if (existingUser) {
      // Aktualizuj auditn√≠ informace p≈ôi p≈ôihl√°≈°en√≠ p≈ôes Google
      const clientIp = req.ip || req.socket.remoteAddress || req.headers['x-forwarded-for'] as string || 'unknown'
      
      await prisma.user.update({
        where: { id: existingUser.id },
        data: {
          lastLoginAt: new Date(),
          lastLoginIp: clientIp,
          loginCount: {
            increment: 1
          },
          name: name || existingUser.name, // Aktualizuj jm√©no pokud se zmƒõnilo
          image: image || existingUser.image, // Aktualizuj avatar pokud se zmƒõnil
        }
      })

      // Zaloguj √∫spƒõ≈°n√© p≈ôihl√°≈°en√≠
      auditLog('LOGIN_SUCCESS', { 
        email, 
        role: existingUser.role, 
        tenant: tenant.slug,
        provider: 'GOOGLE',
        ip: clientIp
      }, req)

      return res.json({
        ...existingUser,
        tenant: tenant.slug
      })
    }

    // Vytvo≈ô nov√©ho u≈æivatele s phone z OAuth
    const clientIp = req.ip || req.socket.remoteAddress || req.headers['x-forwarded-for'] as string || 'unknown'
    
    const newUser = await prisma.user.create({
      data: {
        email,
        name,
        image,
        phone, // Phone z Google OAuth profilu
        authProvider: 'GOOGLE',
        tenantId: tenant.id,
        role: 'CLIENT',
        // ‚úÖ OPRAVA: Nastavit auditn√≠ informace p≈ôi prvotn√≠m p≈ôihl√°≈°en√≠
        lastLoginAt: new Date(),
        lastLoginIp: clientIp,
        loginCount: 1,
      },
    })

    // ‚úÖ OPRAVA: Zaloguj √∫spƒõ≈°n√© p≈ôihl√°≈°en√≠ i pro nov√© u≈æivatele
    auditLog('LOGIN_SUCCESS', { 
      email, 
      role: 'CLIENT', 
      tenant: tenant.slug,
      provider: 'GOOGLE',
      ip: clientIp,
      isNewUser: true
    }, req)

    console.log('‚úÖ Created Google OAuth user with audit info:', { 
      email, 
      phone: phone || 'none',
      lastLoginAt: newUser.lastLoginAt,
      loginCount: newUser.loginCount 
    })
    res.json({
      ...newUser,
      tenant: tenant.slug
    })
  } catch (error) {
    console.error('Chyba p≈ôi vytv√°≈ôen√≠ Google u≈æivatele:', error)
    res.status(500).json({ error: 'Intern√≠ chyba serveru' })
  }
})

// Naƒçten√≠ informac√≠ o u≈æivateli
router.post('/user-info', async (req, res) => {
  try {
    const { email } = req.body
    const tenantSlug = req.headers['x-tenant-slug'] as string

    if (!email) {
      return res.status(400).json({ error: 'Email je povinn√Ω' })
    }

    // Pokud m√°me tenant, hledej u≈æivatele v konkr√©tn√≠m tenantu
    let user
    if (tenantSlug) {
      const tenant = await prisma.tenant.findUnique({
        where: { slug: tenantSlug }
      })
      
      if (tenant) {
        user = await prisma.user.findFirst({
          where: { 
            email,
            tenantId: tenant.id 
          },
          include: { 
            tenant: true, 
            doctor: true 
          },
        })
      }
    }
    
    // Fallback na prvn√≠ nalezen√Ω u≈æivatel (zpƒõtn√° kompatibilita)
    if (!user) {
      user = await prisma.user.findFirst({
        where: { email },
        include: { 
          tenant: true, 
          doctor: true 
        },
      })
    }

    if (!user) {
      return res.status(404).json({ error: 'U≈æivatel nenalezen' })
    }

    res.json({
      id: user.id,
      role: user.role,
      tenant: user.tenant.slug,
      tenantId: user.tenantId,
      isDoctor: !!user.doctor,
      username: user.username,
    })
  } catch (error) {
    console.error('Chyba p≈ôi naƒç√≠t√°n√≠ u≈æivatele:', error)
    res.status(500).json({ error: 'Intern√≠ chyba serveru' })
  }
})

export default router 