generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id        String   @id @default(cuid())
  slug      String   @unique
  name      String
  logoUrl   String?
  primaryColor String @default("#4F46E5")
  secondaryColor String @default("#7C3AED")
  timezone  String   @default("Europe/Prague")
  
  // Defaultní kontaktní údaje pro komunikaci (fallback pro doktory)
  defaultEmail String?  // Email pro notifikace, pokud doktor nemá vlastní
  defaultPhone String?  // Telefon pro komunikaci, pokud doktor nemá vlastní
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users       User[]
  doctors     Doctor[]
  slots       Slot[]
  reservations Reservation[]
  rooms       Room[]
  serviceTypes ServiceType[]

  @@map("tenants")
}

enum UserRole {
  CLIENT
  DOCTOR
  ADMIN
}

enum AuthProvider {
  INTERNAL  // Lokální přihlášení s username/password
  GOOGLE    // Google OAuth
  FACEBOOK  // Facebook OAuth (budoucí)
  APPLE     // Apple ID (budoucí)
  MICROSOFT // Microsoft OAuth (budoucí)
}

model User {
  id           String       @id @default(cuid())
  email        String?      // Email volitelný pro INTERNAL, povinný pro OAuth se získává z providera
  username     String?      // Přihlašovací jméno pro INTERNAL provider
  name         String?
  image        String?
  phone        String?      // Telefonní číslo: volitelné pro INTERNAL, z OAuth profilu pro ostatní
  password     String?      // Heslo pouze pro INTERNAL provider
  authProvider AuthProvider @default(INTERNAL)
  role         UserRole     @default(CLIENT)
  tenantId     String
  
  // Auditní pole
  lastLoginAt  DateTime?    @db.Timestamptz // Poslední úspěšné přihlášení
  lastLoginIp  String?      // IP adresa posledního přihlášení
  loginCount   Int          @default(0)     // Počet přihlášení
  isActive     Boolean      @default(true)  // Účet aktivní/deaktivovaný
  
  createdAt    DateTime     @default(now()) @db.Timestamptz
  updatedAt    DateTime     @updatedAt @db.Timestamptz

  tenant       Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  doctor       Doctor?
  reservations Reservation[]

  // Unikátnost emailu pouze v kontextu auth providera a tenantu (když email není null)
  @@unique([email, authProvider, tenantId], name: "unique_email_provider_tenant")
  // Unikátnost username pouze pro INTERNAL provider v rámci tenantu
  @@unique([username, tenantId], name: "unique_username_tenant")
  @@map("users")
}

model Doctor {
  id          String   @id @default(cuid())
  userId      String   @unique
  specialization String?
  description String?
  tenantId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tenant       Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  slots        Slot[]
  reservations Reservation[]

  @@map("doctors")
}

// Model pro ordinace/místnosti
model Room {
  id          String   @id @default(cuid())
  name        String   // např. "Ordinace 1", "Operační sál"
  description String?  // popis místnosti
  capacity    Int      @default(1) // kolik pacientů současně
  tenantId    String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  slots  Slot[]

  @@unique([tenantId, name]) // unikátní název v rámci tenantu
  @@map("rooms")
}

// Model pro typy služeb/úkonů
model ServiceType {
  id          String   @id @default(cuid())
  name        String   // např. "Základní vyšetření", "Očkování", "RTG"
  description String?  // popis úkonu
  duration    Int      // doba trvání v minutách
  price       Decimal? @db.Decimal(10,2) // cena služby (volitelné)
  color       String?  // barva pro kalendář
  tenantId    String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  slots  Slot[]

  @@unique([tenantId, name]) // unikátní název v rámci tenantu
  @@map("service_types")
}

// Model Slot s vazbami na Room a ServiceType
model Slot {
  id            String    @id @default(cuid())
  doctorId      String
  roomId        String?   // volitelné - reference na Room
  serviceTypeId String?   // volitelné - reference na ServiceType
  startTime     DateTime @db.Timestamptz
  endTime       DateTime @db.Timestamptz
  isAvailable   Boolean   @default(true)
  equipment     String?   // volitelné vybavení/poznámky
  notes         String?   // poznámky k slotu
  tenantId      String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  tenant       Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  doctor       Doctor        @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  room         Room?         @relation(fields: [roomId], references: [id], onDelete: SetNull)
  serviceType  ServiceType?  @relation(fields: [serviceTypeId], references: [id], onDelete: SetNull)
  reservations Reservation[]

  @@unique([doctorId, startTime, endTime])
  @@map("slots")
}

model Reservation {
  id          String   @id @default(cuid())
  userId      String
  doctorId    String
  slotId      String   @unique
  petName     String?
  petType     String?
  description String?
  status      ReservationStatus @default(PENDING)
  tenantId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  doctor Doctor @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  slot   Slot   @relation(fields: [slotId], references: [id], onDelete: Cascade)

  @@map("reservations")
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}
