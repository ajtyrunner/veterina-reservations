import { body, param, query, validationResult } from 'express-validator'
import { Request, Response, NextFunction } from 'express'
import validator from 'validator'

// Middleware pro handling validation errors
export const handleValidationErrors = (req: Request, res: Response, next: NextFunction) => {
  const errors = validationResult(req)
  if (!errors.isEmpty()) {
    console.log('üö´ Validation failed:', errors.array())
    return res.status(400).json({
      error: 'Neplatn√° data',
      details: errors.array().map(err => ({
        field: err.type === 'field' ? err.path : 'unknown',
        message: err.msg
      }))
    })
  }
  next()
}

// Validace pro vytvo≈ôen√≠ rezervace
export const validateCreateReservation = [
  body('slotId')
    .isString()
    .isLength({ min: 1, max: 100 })
    .withMessage('SlotId je povinn√Ω a mus√≠ b√Ωt platn√Ω string'),
  
  body('petName')
    .optional()
    .isString()
    .isLength({ min: 1, max: 100 })
    .custom((value) => {
      // XSS ochrana - nepovol√≠ HTML tagy
      if (value && value !== validator.escape(value)) {
        throw new Error('Jm√©no zv√≠≈ôete obsahuje nepovolen√© znaky')
      }
      return true
    })
    .withMessage('Jm√©no zv√≠≈ôete mus√≠ b√Ωt 1-100 znak≈Ø a nesm√≠ obsahovat HTML'),
  
  body('petType')
    .optional()
    .isString()
    .isLength({ min: 1, max: 50 })
    .isIn(['pes', 'koƒçka', 'kr√°l√≠k', 'pt√°k', 'hlodavec', 'plaz', 'jin√©'])
    .withMessage('Druh zv√≠≈ôete mus√≠ b√Ωt z povolen√©ho seznamu'),
  
  body('description')
    .optional()
    .isString()
    .isLength({ max: 1000 })
    .custom((value) => {
      if (value && value !== validator.escape(value)) {
        throw new Error('Popis obsahuje nepovolen√© znaky')
      }
      return true
    })
    .withMessage('Popis nesm√≠ b√Ωt del≈°√≠ ne≈æ 1000 znak≈Ø a nesm√≠ obsahovat HTML'),
  
  handleValidationErrors
]

// Validace pro vytvo≈ôen√≠ slotu
export const validateCreateSlot = [
  body('startTime')
    .isISO8601()
    .withMessage('ƒåas zaƒç√°tku mus√≠ b√Ωt platn√Ω ISO8601 datum'),
  
  body('endTime')
    .isISO8601()
    .withMessage('ƒåas konce mus√≠ b√Ωt platn√Ω ISO8601 datum')
    .custom((endTime, { req }) => {
      const startTime = new Date(req.body.startTime)
      const end = new Date(endTime)
      
      if (end <= startTime) {
        throw new Error('ƒåas konce mus√≠ b√Ωt po ƒçasu zaƒç√°tku')
      }
      
      // Max 8 hodin na slot
      const maxDuration = 8 * 60 * 60 * 1000 // 8 hodin v ms
      if (end.getTime() - startTime.getTime() > maxDuration) {
        throw new Error('Slot nesm√≠ b√Ωt del≈°√≠ ne≈æ 8 hodin')
      }
      
      return true
    }),
  
  body('equipment')
    .optional()
    .isString()
    .isLength({ max: 500 })
    .custom((value) => {
      if (value && value !== validator.escape(value)) {
        throw new Error('Vybaven√≠ obsahuje nepovolen√© znaky')
      }
      return true
    })
    .withMessage('Vybaven√≠ nesm√≠ b√Ωt del≈°√≠ ne≈æ 500 znak≈Ø'),
  
  body('roomId')
    .optional()
    .isString()
    .isLength({ min: 1, max: 100 })
    .withMessage('RoomId mus√≠ b√Ωt platn√Ω string'),
  
  body('serviceTypeId')
    .optional()
    .isString()
    .isLength({ min: 1, max: 100 })
    .withMessage('ServiceTypeId mus√≠ b√Ωt platn√Ω string'),
  
  handleValidationErrors
]

// Validace pro bulk generov√°n√≠ slot≈Ø
export const validateBulkSlotGeneration = [
  body('weekdays')
    .isArray({ min: 1, max: 7 })
    .withMessage('Dny v t√Ωdnu mus√≠ b√Ωt pole s 1-7 prvky')
    .custom((weekdays) => {
      if (!weekdays.every((day: any) => Number.isInteger(day) && day >= 0 && day <= 6)) {
        throw new Error('Dny v t√Ωdnu mus√≠ b√Ωt ƒç√≠sla 0-6')
      }
      return true
    }),
  
  body('startTime')
    .matches(/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/)
    .withMessage('ƒåas zaƒç√°tku mus√≠ b√Ωt ve form√°tu HH:MM'),
  
  body('endTime')
    .matches(/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/)
    .withMessage('ƒåas konce mus√≠ b√Ωt ve form√°tu HH:MM')
    .custom((endTime, { req }) => {
      const [startHour, startMin] = req.body.startTime.split(':').map(Number)
      const [endHour, endMin] = endTime.split(':').map(Number)
      
      const startMinutes = startHour * 60 + startMin
      const endMinutes = endHour * 60 + endMin
      
      if (endMinutes <= startMinutes) {
        throw new Error('ƒåas konce mus√≠ b√Ωt po ƒçasu zaƒç√°tku')
      }
      
      return true
    }),
  
  body('interval')
    .isInt({ min: 0, max: 480 })
    .withMessage('Interval mus√≠ b√Ωt ƒç√≠slo mezi 0-480 minutami'),
  
  body('weeksCount')
    .isInt({ min: 1, max: 26 }) // Sn√≠≈æeno z 52 na 26 pro bezpeƒçnost
    .withMessage('Poƒçet t√Ωdn≈Ø mus√≠ b√Ωt mezi 1-26'),
  
  body('startDate')
    .isISO8601()
    .withMessage('Datum zaƒç√°tku mus√≠ b√Ωt platn√Ω ISO8601 datum')
    .custom((startDate) => {
      const date = new Date(startDate)
      const now = new Date()
      const maxFuture = new Date()
      maxFuture.setFullYear(now.getFullYear() + 1) // Max rok dop≈ôedu
      
      if (date < now) {
        throw new Error('Datum zaƒç√°tku nem≈Ø≈æe b√Ωt v minulosti')
      }
      
      if (date > maxFuture) {
        throw new Error('Datum zaƒç√°tku nem≈Ø≈æe b√Ωt v√≠ce ne≈æ rok dop≈ôedu')
      }
      
      return true
    }),
  
  body('breakTimes')
    .optional()
    .isArray({ max: 10 })
    .withMessage('P≈ôest√°vky mus√≠ b√Ωt pole s max 10 prvky')
    .custom((breakTimes) => {
      if (breakTimes) {
        for (const breakTime of breakTimes) {
          if (!breakTime.start || !breakTime.end) {
            throw new Error('Ka≈æd√° p≈ôest√°vka mus√≠ m√≠t start a end')
          }
          if (!/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/.test(breakTime.start) ||
              !/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/.test(breakTime.end)) {
            throw new Error('ƒåasy p≈ôest√°vek mus√≠ b√Ωt ve form√°tu HH:MM')
          }
        }
      }
      return true
    }),
  
  body('doctorId')
    .optional()
    .isString()
    .isLength({ min: 1, max: 100 })
    .withMessage('DoctorId mus√≠ b√Ωt platn√Ω string'),
  
  handleValidationErrors
]

// Validace pro aktualizaci statusu rezervace
export const validateUpdateReservationStatus = [
  param('id')
    .isString()
    .isLength({ min: 1, max: 100 })
    .withMessage('ID rezervace mus√≠ b√Ωt platn√Ω string'),
  
  body('status')
    .isIn(['PENDING', 'CONFIRMED', 'CANCELLED', 'COMPLETED'])
    .withMessage('Status mus√≠ b√Ωt jeden z: PENDING, CONFIRMED, CANCELLED, COMPLETED'),
  
  body('notes')
    .optional()
    .isString()
    .isLength({ max: 2000 })
    .custom((value) => {
      if (value && value !== validator.escape(value)) {
        throw new Error('Pozn√°mky obsahuj√≠ nepovolen√© znaky')
      }
      return true
    })
    .withMessage('Pozn√°mky nesm√≠ b√Ωt del≈°√≠ ne≈æ 2000 znak≈Ø'),
  
  handleValidationErrors
]

// Validace pro vytvo≈ôen√≠ room/service type
export const validateCreateRoom = [
  body('name')
    .isString()
    .isLength({ min: 1, max: 100 })
    .custom((value) => {
      if (value !== validator.escape(value)) {
        throw new Error('N√°zev obsahuje nepovolen√© znaky')
      }
      return true
    })
    .withMessage('N√°zev je povinn√Ω, 1-100 znak≈Ø, bez HTML'),
  
  body('description')
    .optional()
    .isString()
    .isLength({ max: 500 })
    .custom((value) => {
      if (value && value !== validator.escape(value)) {
        throw new Error('Popis obsahuje nepovolen√© znaky')
      }
      return true
    })
    .withMessage('Popis nesm√≠ b√Ωt del≈°√≠ ne≈æ 500 znak≈Ø'),
  
  body('capacity')
    .optional()
    .isInt({ min: 1, max: 100 })
    .withMessage('Kapacita mus√≠ b√Ωt ƒç√≠slo mezi 1-100'),
  
  body('isActive')
    .optional()
    .isBoolean()
    .withMessage('IsActive mus√≠ b√Ωt boolean'),
  
  handleValidationErrors
]

// Validace pro vytvo≈ôen√≠ service type
export const validateCreateServiceType = [
  body('name')
    .isString()
    .isLength({ min: 1, max: 100 })
    .custom((value) => {
      if (value !== validator.escape(value)) {
        throw new Error('N√°zev obsahuje nepovolen√© znaky')
      }
      return true
    })
    .withMessage('N√°zev je povinn√Ω, 1-100 znak≈Ø, bez HTML'),
  
  body('description')
    .optional()
    .isString()
    .isLength({ max: 500 })
    .custom((value) => {
      if (value && value !== validator.escape(value)) {
        throw new Error('Popis obsahuje nepovolen√© znaky')
      }
      return true
    })
    .withMessage('Popis nesm√≠ b√Ωt del≈°√≠ ne≈æ 500 znak≈Ø'),
  
  body('duration')
    .optional()
    .isInt({ min: 5, max: 480 })
    .withMessage('D√©lka mus√≠ b√Ωt mezi 5-480 minutami'),
  
  body('durationMinutes')
    .optional()
    .isInt({ min: 5, max: 480 })
    .withMessage('D√©lka mus√≠ b√Ωt mezi 5-480 minutami'),
  
  body('price')
    .optional()
    .isFloat({ min: 0, max: 999999 })
    .withMessage('Cena mus√≠ b√Ωt kladn√© ƒç√≠slo do 999999'),
  
  body('color')
    .optional()
    .matches(/^#[0-9A-Fa-f]{6}$/)
    .withMessage('Barva mus√≠ b√Ωt platn√Ω hex k√≥d (#RRGGBB)'),
  
  body('isActive')
    .optional()
    .isBoolean()
    .withMessage('IsActive mus√≠ b√Ωt boolean'),
  
  handleValidationErrors
]

// Validace pro query parametry
export const validateQueryParams = [
  query('status')
    .optional()
    .isIn(['PENDING', 'CONFIRMED', 'CANCELLED', 'COMPLETED'])
    .withMessage('Status mus√≠ b√Ωt jeden z povolen√Ωch'),
  
  query('doctorId')
    .optional()
    .isString()
    .isLength({ min: 1, max: 100 })
    .withMessage('DoctorId mus√≠ b√Ωt platn√Ω string'),
  
  query('date')
    .optional()
    .isDate()
    .withMessage('Datum mus√≠ b√Ωt platn√©'),
  
  handleValidationErrors
] 