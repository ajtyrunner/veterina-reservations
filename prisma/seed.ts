import { PrismaClient, UserRole } from '@prisma/client'
import bcrypt from 'bcryptjs'

const prisma = new PrismaClient()

async function main() {
  console.log('üå± Zaƒç√≠n√°m seedov√°n√≠ datab√°ze...')

  // Vytvo≈ôen√≠ v√≠ce testovac√≠ch tenant≈Ø
  const tenants = [
    {
      slug: 'svahy',
      name: 'Veterin√°rn√≠ ordinace Svahy',
      logoUrl: 'https://veterina-svahy.cz/logo.png',
      primaryColor: '#4F46E5',
      secondaryColor: '#7C3AED',
    },
    {
      slug: 'brno-vet',
      name: 'Veterin√°rn√≠ klinika Brno',
      logoUrl: null,
      primaryColor: '#059669',
      secondaryColor: '#047857',
    },
    {
      slug: 'psikocky',
      name: 'Ordinace pro psy a koƒçky',
      logoUrl: null,
      primaryColor: '#DC2626',
      secondaryColor: '#B91C1C',
    },
    {
      slug: 'test',
      name: 'Testovac√≠ veterin√°rn√≠ ordinace',
      logoUrl: null,
      primaryColor: '#7C2D12',
      secondaryColor: '#92400E',
    },
  ]

  const createdTenants = []
  for (const tenantData of tenants) {
    const tenant = await prisma.tenant.upsert({
      where: { slug: tenantData.slug },
      update: {},
      create: tenantData,
    })
    createdTenants.push(tenant)
    console.log('‚úÖ Tenant vytvo≈ôen:', tenant.name)
  }

  // Hlavn√≠ tenant pro dal≈°√≠ seed data
  const mainTenant = createdTenants[0] // svahy

  // Vytvo≈ôen√≠ admin u≈æivatele
  const adminPassword = 'K9mX2nP7qE' // N√°hodn√© 10m√≠stn√© heslo
  const adminHashedPassword = await bcrypt.hash(adminPassword, 12)
  // console.log('üîê Admin heslo:', adminPassword) // BEZPEƒåNOST: Nelogovat plaintext hesla
  console.log('‚úÖ Admin u≈æivatel bude vytvo≈ôen s heslem z k√≥du')
  const adminUser = await prisma.user.upsert({
    where: { email: 'admin@veterina-svahy.cz' },
    update: {},
    create: {
      email: 'admin@veterina-svahy.cz',
      name: 'Administr√°tor',
      password: adminHashedPassword,
      role: UserRole.ADMIN,
      tenantId: mainTenant.id,
    },
  })

  console.log('‚úÖ Admin u≈æivatel vytvo≈ôen:', adminUser.email)

  // Vytvo≈ôen√≠ doktor≈Ø s hesly
  const doctorPassword = await bcrypt.hash('doktor123', 12)
  
  const doctorsData = [
    {
      email: 'lucia.friedlaenderova@veterina-svahy.cz',
      name: 'MVDr. Lucia Friedlaenderov√°',
      specialization: 'Mal√° zv√≠≈ôata',
      description: 'Specializace na psy a koƒçky, chirurgie',
    },
    {
      email: 'jana.ambruzova@veterina-svahy.cz',
      name: 'MVDr. Jana Ambruzov√°',
      specialization: 'Mal√° zv√≠≈ôata',
      description: 'V≈°eobecn√° veterin√°rn√≠ praxe',
    },
    {
      email: 'klara.navratilova@veterina-svahy.cz',
      name: 'MVDr. Kl√°ra Navr√°tilov√°',
      specialization: 'Mal√° zv√≠≈ôata',
      description: 'Preventivn√≠ p√©ƒçe a vakcinace',
    },
    {
      email: 'martina.simkova@veterina-svahy.cz',
      name: 'MVDr. Martina ≈†imkov√°',
      specialization: 'Mal√° zv√≠≈ôata',
      description: 'Dermatologie a alergologie',
    },
  ]

  const createdDoctors = []
  for (const doctorData of doctorsData) {
    const doctorUser = await prisma.user.upsert({
      where: { email: doctorData.email },
      update: {},
      create: {
        email: doctorData.email,
        name: doctorData.name,
        password: doctorPassword,
        role: UserRole.DOCTOR,
        tenantId: mainTenant.id,
      },
    })

    const doctor = await prisma.doctor.upsert({
      where: { userId: doctorUser.id },
      update: {},
      create: {
        userId: doctorUser.id,
        specialization: doctorData.specialization,
        description: doctorData.description,
        tenantId: mainTenant.id,
      },
    })

    createdDoctors.push(doctor)
    console.log('‚úÖ Doktor vytvo≈ôen:', doctorUser.name)
  }

  // Vytvo≈ôen√≠ ordinac√≠/m√≠stnost√≠
  const roomsData = [
    {
      name: 'Ordinace 1',
      description: 'Hlavn√≠ vy≈°et≈ôovna pro z√°kladn√≠ vy≈°et≈ôen√≠',
      capacity: 1,
    },
    {
      name: 'Ordinace 2',
      description: 'Vedlej≈°√≠ ordinace pro rutinn√≠ v√Ωkony',
      capacity: 1,
    },
    {
      name: 'Operaƒçn√≠ s√°l',
      description: 'Steriln√≠ prost≈ôed√≠ pro chirurgick√© z√°kroky',
      capacity: 1,
    },
    {
      name: 'RTG m√≠stnost',
      description: 'Rentgenov√© vy≈°et≈ôen√≠',
      capacity: 1,
    },
  ]

  const createdRooms = []
  for (const roomData of roomsData) {
    const room = await prisma.room.upsert({
      where: { 
        tenantId_name: {
          tenantId: mainTenant.id,
          name: roomData.name
        }
      },
      update: {},
      create: {
        ...roomData,
        tenantId: mainTenant.id,
      },
    })
    createdRooms.push(room)
    console.log('‚úÖ M√≠stnost vytvo≈ôena:', room.name)
  }

  // Vytvo≈ôen√≠ typ≈Ø slu≈æeb/√∫kon≈Ø
  const serviceTypesData = [
    {
      name: 'Z√°kladn√≠ vy≈°et≈ôen√≠',
      description: 'Rutinn√≠ kontrola zdravotn√≠ho stavu',
      duration: 30, // 30 minut
      price: 500.00,
      color: '#10B981', // zelen√°
    },
    {
      name: 'Oƒçkov√°n√≠',
      description: 'Preventivn√≠ oƒçkov√°n√≠ podle vƒõku',
      duration: 15, // 15 minut
      price: 300.00,
      color: '#3B82F6', // modr√°
    },
    {
      name: 'Chirurgick√Ω z√°krok',
      description: 'Operativn√≠ v√Ωkony',
      duration: 90, // 90 minut
      price: 2000.00,
      color: '#EF4444', // ƒçerven√°
    },
    {
      name: 'RTG vy≈°et≈ôen√≠',
      description: 'Rentgenov√© sn√≠mkov√°n√≠',
      duration: 20, // 20 minut
      price: 800.00,
      color: '#8B5CF6', // fialov√°
    },
    {
      name: 'Ultrazvuk',
      description: 'Ultrazvukov√© vy≈°et≈ôen√≠',
      duration: 25, // 25 minut
      price: 600.00,
      color: '#F59E0B', // oran≈æov√°
    },
    {
      name: 'Dent√°ln√≠ p√©ƒçe',
      description: 'O≈°et≈ôen√≠ zub≈Ø a d√°sn√≠',
      duration: 45, // 45 minut
      price: 1200.00,
      color: '#06B6D4', // tyrkysov√°
    },
  ]

  const createdServiceTypes = []
  for (const serviceData of serviceTypesData) {
    const serviceType = await prisma.serviceType.upsert({
      where: { 
        tenantId_name: {
          tenantId: mainTenant.id,
          name: serviceData.name
        }
      },
      update: {},
      create: {
        ...serviceData,
        tenantId: mainTenant.id,
      },
    })
    createdServiceTypes.push(serviceType)
    console.log('‚úÖ Typ slu≈æby vytvo≈ôen:', serviceType.name)
  }

  // Z√°kladn√≠ datab√°ze je p≈ôipravena - sloty budou vytv√°≈ôeny doktory p≈ô√≠mo v aplikaci

  console.log('üéâ Seedov√°n√≠ dokonƒçeno!')
}

main()
  .then(async () => {
    await prisma.$disconnect()
  })
  .catch(async (e) => {
    console.error('‚ùå Chyba p≈ôi seedov√°n√≠:', e)
    await prisma.$disconnect()
    process.exit(1)
  })
