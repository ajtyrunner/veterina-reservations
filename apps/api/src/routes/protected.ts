import { Router, Request, Response } from 'express'
import { PrismaClient } from '@prisma/client'
import { parsePragueDateTime, parseTimezoneDateTime, logTimezoneDebug } from '../utils/timezone'
import { getCachedTenantTimezone } from '../utils/tenant'
import { NotificationService } from '../services/notificationService'
import { bulkOperationLimit, createOperationLimit } from '../middleware/rateLimiter'
import { 
  validateCreateReservation, 
  validateCreateSlot, 
  validateBulkSlotGeneration,
  validateUpdateReservationStatus,
  validateCreateRoom,
  validateCreateServiceType,
  validateQueryParams
} from '../middleware/validation'

const router = Router()
const prisma = new PrismaClient()
const notificationService = new NotificationService(prisma)

// Z√≠sk√°n√≠ rezervac√≠ (u≈æivatelsk√© pro CLIENT, v≈°echny pro DOCTOR/ADMIN)
router.get('/reservations', validateQueryParams, async (req: Request, res: Response) => {
  try {
    const userId = req.user?.sub
    const tenantId = req.user?.tenant
    const userRole = req.user?.role
    const { status } = req.query

    console.log('=== DEBUG: GET /reservations ===')
    console.log('userId:', userId)
    console.log('tenantId:', tenantId)
    console.log('userRole:', userRole)
    console.log('status filter:', status)

    if (!userId || !tenantId) {
      return res.status(400).json({ error: 'Chyb√≠ u≈æivatelsk√© √∫daje' })
    }

    let whereCondition: any = { tenantId }

    // Pro CLIENT role - pouze vlastn√≠ rezervace
    if (userRole === 'CLIENT') {
      whereCondition.userId = userId
    } else if (userRole === 'DOCTOR') {
      // Pro DOCTOR - pouze rezervace pro jeho sloty
      const doctor = await prisma.doctor.findFirst({
        where: { userId, tenantId },
      })

      if (!doctor) {
        return res.status(404).json({ error: 'Profil doktora nenalezen' })
      }

      whereCondition.doctorId = doctor.id
    }
    // Pro ADMIN - v≈°echny rezervace v tenantovi (≈æ√°dn√© dal≈°√≠ omezen√≠)

    // Filtrov√°n√≠ podle stavu, pokud je zad√°no
    if (status) {
      whereCondition.status = status
    }

    console.log('Where condition:', JSON.stringify(whereCondition, null, 2))

    const reservations = await prisma.reservation.findMany({
      where: whereCondition,
      include: {
        user: {
          select: {
            name: true,
            email: true,
          },
        },
        doctor: {
          include: {
            user: {
              select: {
                name: true,
              },
            },
          },
        },
        slot: {
          include: {
            doctor: {
              include: {
                user: {
                  select: {
                    name: true,
                  },
                },
              },
            },
          },
        },
      },
      orderBy: {
        createdAt: 'desc',
      },
    })

    console.log(`Found ${reservations.length} reservations`)
    res.json(reservations)
  } catch (error) {
    console.error('Chyba p≈ôi naƒç√≠t√°n√≠ rezervac√≠:', error)
    res.status(500).json({ error: 'Intern√≠ chyba serveru' })
  }
})

// Vytvo≈ôen√≠ nov√© rezervace
router.post('/reservations', createOperationLimit, validateCreateReservation, async (req: Request, res: Response) => {
  try {
    const userId = req.user?.sub
    const tenantId = req.user?.tenant
    const { slotId, petName, petType, description } = req.body

    if (!userId || !tenantId) {
      return res.status(400).json({ error: 'Chyb√≠ u≈æivatelsk√© √∫daje' })
    }

    if (!slotId) {
      return res.status(400).json({ error: 'SlotId je povinn√Ω' })
    }

    // Ovƒõ≈ôit, ≈æe slot existuje a je dostupn√Ω
    const slot = await prisma.slot.findFirst({
      where: {
        id: slotId,
        tenantId,
        isAvailable: true,
      },
      include: {
        reservations: true,
      },
    })

    if (!slot) {
      return res.status(404).json({ error: 'Slot nenalezen nebo nen√≠ dostupn√Ω' })
    }

    if (slot.reservations.length > 0) {
      return res.status(409).json({ error: 'Slot je ji≈æ rezervovan√Ω' })
    }

    // Vytvo≈ôit rezervaci
    const reservation = await prisma.reservation.create({
      data: {
        userId,
        doctorId: slot.doctorId,
        slotId,
        petName,
        petType,
        description,
        tenantId,
      },
      include: {
        slot: {
          include: {
            doctor: {
              include: {
                user: {
                  select: {
                    name: true,
                  },
                },
              },
            },
          },
        },
      },
    })

    // üìß Send notification to doctor about new reservation
    try {
      await notificationService.sendReservationStatusNotification({
        reservationId: reservation.id,
        tenantId,
        newStatus: 'PENDING',
        notifyBoth: false
      })
    } catch (notificationError) {
      console.error('‚ùå Failed to send new reservation notification:', notificationError)
      // Don't fail the request if notification fails
    }

    res.status(201).json(reservation)
  } catch (error) {
    console.error('Chyba p≈ôi vytv√°≈ôen√≠ rezervace:', error)
    res.status(500).json({ error: 'Intern√≠ chyba serveru' })
  }
})

// Aktualizace stavu rezervace (pro doktory/adminy)
router.patch('/reservations/:id', validateUpdateReservationStatus, async (req: Request, res: Response) => {
  try {
    const userId = req.user?.sub
    const tenantId = req.user?.tenant
    const userRole = req.user?.role
    const { id } = req.params
    const { status } = req.body

    console.log('=== DEBUG: PATCH /reservations/:id ===')
    console.log('userId:', userId)
    console.log('tenantId:', tenantId)
    console.log('userRole:', userRole)
    console.log('reservationId:', id)
    console.log('new status:', status)

    if (!userId || !tenantId) {
      return res.status(400).json({ error: 'Chyb√≠ u≈æivatelsk√© √∫daje' })
    }

    // Pouze dokto≈ôi a admini mohou upravovat stav rezervac√≠
    if (userRole !== 'DOCTOR' && userRole !== 'ADMIN') {
      return res.status(403).json({ error: 'Nedostateƒçn√° opr√°vnƒõn√≠' })
    }

    // Validace stavu
    const validStatuses = ['PENDING', 'CONFIRMED', 'CANCELLED', 'COMPLETED']
    if (!validStatuses.includes(status)) {
      return res.status(400).json({ error: 'Neplatn√Ω stav rezervace' })
    }

    let whereCondition: any = { id, tenantId }

    // DOCTOR m≈Ø≈æe upravovat pouze rezervace pro sv√© sloty
    if (userRole === 'DOCTOR') {
      const doctor = await prisma.doctor.findFirst({
        where: { userId, tenantId },
      })

      if (!doctor) {
        return res.status(404).json({ error: 'Profil doktora nenalezen' })
      }

      whereCondition.doctorId = doctor.id
    }
    // ADMIN m≈Ø≈æe upravovat v≈°echny rezervace v tenantovi

    const reservation = await prisma.reservation.findFirst({
      where: whereCondition,
      include: {
        user: {
          select: {
            name: true,
            email: true,
          },
        },
        doctor: {
          include: {
            user: {
              select: {
                name: true,
              },
            },
          },
        },
        slot: {
          select: {
            startTime: true,
            endTime: true,
            equipment: true,
          },
        },
      },
    })

    if (!reservation) {
      return res.status(404).json({ error: 'Rezervace nenalezena' })
    }

    const oldStatus = reservation.status
    const updatedReservation = await prisma.reservation.update({
      where: { id },
      data: { status },
      include: {
        user: {
          select: {
            name: true,
            email: true,
          },
        },
        doctor: {
          include: {
            user: {
              select: {
                name: true,
              },
            },
          },
        },
        slot: {
          select: {
            startTime: true,
            endTime: true,
            equipment: true,
          },
        },
      },
    })

    // üìß Send notification about status change
    try {
      await notificationService.sendReservationStatusNotification({
        reservationId: id,
        tenantId,
        oldStatus: oldStatus as any,
        newStatus: status as any,
        notifyBoth: status === 'CANCELLED' // Notify both for cancellations
      })
    } catch (notificationError) {
      console.error('‚ùå Failed to send status change notification:', notificationError)
      // Don't fail the request if notification fails
    }

    res.json(updatedReservation)
  } catch (error) {
    console.error('Chyba p≈ôi aktualizaci rezervace:', error)
    res.status(500).json({ error: 'Intern√≠ chyba serveru' })
  }
})

// Zru≈°en√≠ rezervace
router.delete('/reservations/:id', async (req: Request, res: Response) => {
  try {
    const userId = req.user?.sub
    const tenantId = req.user?.tenant
    const { id } = req.params

    if (!userId || !tenantId) {
      return res.status(400).json({ error: 'Chyb√≠ u≈æivatelsk√© √∫daje' })
    }

    const reservation = await prisma.reservation.findFirst({
      where: {
        id,
        userId,
        tenantId,
      },
    })

    if (!reservation) {
      return res.status(404).json({ error: 'Rezervace nenalezena' })
    }

    await prisma.reservation.update({
      where: { id },
      data: { status: 'CANCELLED' },
    })

    // üìß Send cancellation notification
    try {
      await notificationService.sendReservationStatusNotification({
        reservationId: id,
        tenantId,
        oldStatus: reservation.status as any,
        newStatus: 'CANCELLED',
        notifyBoth: true // Client cancelled, notify both client and doctor
      })
    } catch (notificationError) {
      console.error('‚ùå Failed to send cancellation notification:', notificationError)
      // Don't fail the request if notification fails
    }

    res.json({ message: 'Rezervace zru≈°ena' })
  } catch (error) {
    console.error('Chyba p≈ôi ru≈°en√≠ rezervace:', error)
    res.status(500).json({ error: 'Intern√≠ chyba serveru' })
  }
})

// Routes pro doktory - vytv√°≈ôen√≠ slot≈Ø
router.post('/doctor/slots', createOperationLimit, validateCreateSlot, async (req: Request, res: Response) => {
  try {
    const userId = req.user?.sub
    const tenantId = req.user?.tenant
    const userRole = req.user?.role
    const { startTime, endTime, equipment, doctorId, roomId, serviceTypeId } = req.body

    console.log('=== DEBUG: Creating slot ===')
    console.log('userId:', userId)
    console.log('tenantId:', tenantId)
    console.log('userRole:', userRole)
    console.log('body:', req.body)

    if (!userId || !tenantId) {
      return res.status(400).json({ error: 'Chyb√≠ u≈æivatelsk√© √∫daje' })
    }

    if (userRole !== 'DOCTOR' && userRole !== 'ADMIN') {
      return res.status(403).json({ error: 'Nedostateƒçn√° opr√°vnƒõn√≠' })
    }

    let targetDoctorId: string

    if (userRole === 'ADMIN') {
      if (doctorId) {
        // ADMIN m≈Ø≈æe specifikovat doktora
        const doctor = await prisma.doctor.findFirst({
          where: { id: doctorId, tenantId },
        })
        if (!doctor) {
          return res.status(404).json({ error: 'Specifikovan√Ω doktor nenalezen' })
        }
        targetDoctorId = doctorId
      } else {
        // Pokud ADMIN nespecifikuje doktora, najdeme prvn√≠ho dostupn√©ho doktora v tenantovi
        const firstDoctor = await prisma.doctor.findFirst({
          where: { tenantId },
        })
        if (!firstDoctor) {
          return res.status(404).json({ error: '≈Ω√°dn√Ω doktor nenalezen v t√©to ordinaci' })
        }
        targetDoctorId = firstDoctor.id
      }
    } else {
      // Pro DOCTOR role najdeme profil doktora podle userId
      const doctor = await prisma.doctor.findFirst({
        where: {
          userId,
          tenantId,
        },
      })

      if (!doctor) {
        return res.status(404).json({ error: 'Profil doktora nenalezen' })
      }
      targetDoctorId = doctor.id
    }

    // Timezone-aware kontrola, zda slot u≈æ neexistuje
    const tenantTimezone = await getCachedTenantTimezone(prisma, tenantId)
    const startTimeUTCCheck = parseTimezoneDateTime(startTime, tenantTimezone)
    const endTimeUTCCheck = parseTimezoneDateTime(endTime, tenantTimezone)
    
    const existingSlot = await prisma.slot.findFirst({
      where: {
        doctorId: targetDoctorId,
        startTime: startTimeUTCCheck,
        endTime: endTimeUTCCheck,
      },
    })

    if (existingSlot) {
      return res.status(409).json({ 
        error: `Slot pro tento ƒças u≈æ existuje (${startTimeUTCCheck.toLocaleString('cs-CZ', { timeZone: 'Europe/Prague' })} - ${endTimeUTCCheck.toLocaleString('cs-CZ', { timeZone: 'Europe/Prague' })})` 
      })
    }

    // Timezone handling - p≈ôevedeme frontend ƒças na UTC podle tenant timezone
    const startTimeUTC = parseTimezoneDateTime(startTime, tenantTimezone)
    const endTimeUTC = parseTimezoneDateTime(endTime, tenantTimezone)
    
    console.log('Creating slot with timezone handling:')
    console.log('- doctorId:', targetDoctorId)
    console.log('- tenantTimezone:', tenantTimezone)
    logTimezoneDebug('Original startTime', startTime)
    logTimezoneDebug('Parsed startTime UTC', startTimeUTC, tenantTimezone)
    logTimezoneDebug('Original endTime', endTime)
    logTimezoneDebug('Parsed endTime UTC', endTimeUTC, tenantTimezone)
    console.log('- roomId:', roomId)
    console.log('- serviceTypeId:', serviceTypeId)

    const slot = await prisma.slot.create({
      data: {
        doctorId: targetDoctorId,
        startTime: startTimeUTC,
        endTime: endTimeUTC,
        roomId: roomId || null,
        serviceTypeId: serviceTypeId || null,
        equipment,
        tenantId,
      },
      include: {
        doctor: {
          include: {
            user: {
              select: {
                name: true,
              },
            },
          },
        },
        room: true,
        serviceType: true,
        reservations: {
          include: {
            user: {
              select: {
                name: true,
                email: true,
              },
            },
          },
        },
      },
    })

    res.status(201).json(slot)
  } catch (error) {
    console.error('Chyba p≈ôi vytv√°≈ôen√≠ slotu:', error)
    res.status(500).json({ error: 'Intern√≠ chyba serveru' })
  }
})

// Z√≠sk√°n√≠ slot≈Ø doktora
router.get('/doctor/slots', async (req: Request, res: Response) => {
  try {
    const userId = req.user?.sub
    const tenantId = req.user?.tenant
    const userRole = req.user?.role

    if (!userId || !tenantId) {
      return res.status(400).json({ error: 'Chyb√≠ u≈æivatelsk√© √∫daje' })
    }

    if (userRole !== 'DOCTOR' && userRole !== 'ADMIN') {
      return res.status(403).json({ error: 'Nedostateƒçn√° opr√°vnƒõn√≠' })
    }

    let whereCondition: any = { tenantId }

    if (userRole === 'ADMIN') {
      // ADMIN vid√≠ v≈°echny sloty v tenantovi
      whereCondition = { tenantId }
    } else {
      // DOCTOR vid√≠ pouze sv√© sloty
      const doctor = await prisma.doctor.findFirst({
        where: {
          userId,
          tenantId,
        },
      })

      if (!doctor) {
        return res.status(404).json({ error: 'Profil doktora nenalezen' })
      }
      whereCondition.doctorId = doctor.id
    }

    const slots = await prisma.slot.findMany({
      where: whereCondition,
      include: {
        doctor: {
          include: {
            user: {
              select: {
                name: true,
              },
            },
          },
        },
        room: {
          select: {
            id: true,
            name: true,
            description: true,
          },
        },
        serviceType: {
          select: {
            id: true,
            name: true,
            description: true,
            duration: true,
            color: true,
          },
        },
        reservations: {
          where: {
            status: {
              in: ['PENDING', 'CONFIRMED']
            }
          },
          include: {
            user: {
              select: {
                name: true,
                email: true,
              },
            },
          },
        },
      },
      orderBy: {
        startTime: 'asc',
      },
    })

    res.json(slots)
  } catch (error) {
    console.error('Chyba p≈ôi naƒç√≠t√°n√≠ slot≈Ø doktora:', error)
    res.status(500).json({ error: 'Intern√≠ chyba serveru' })
  }
})

// √öprava slotu
router.put('/doctor/slots/:id', async (req: Request, res: Response) => {
  try {
    const userId = req.user?.sub
    const tenantId = req.user?.tenant
    const userRole = req.user?.role
    const { id } = req.params
    const { startTime, endTime, equipment, roomId, serviceTypeId } = req.body

    if (!userId || !tenantId) {
      return res.status(400).json({ error: 'Chyb√≠ u≈æivatelsk√© √∫daje' })
    }

    if (userRole !== 'DOCTOR' && userRole !== 'ADMIN') {
      return res.status(403).json({ error: 'Nedostateƒçn√° opr√°vnƒõn√≠' })
    }

    // Najdi slot a ovƒõ≈ô opr√°vnƒõn√≠
    const existingSlot = await prisma.slot.findFirst({
      where: { id, tenantId },
      include: { reservations: true },
    })

    if (!existingSlot) {
      return res.status(404).json({ error: 'Slot nenalezen' })
    }

    // Nelze upravit slot s rezervacemi
    if (existingSlot.reservations.length > 0) {
      return res.status(409).json({ error: 'Nelze upravit slot s existuj√≠c√≠mi rezervacemi' })
    }

    // Pro DOCTOR role ovƒõ≈ô, ≈æe je to jeho slot
    if (userRole === 'DOCTOR') {
      const doctor = await prisma.doctor.findFirst({
        where: { userId, tenantId },
      })

      if (!doctor || existingSlot.doctorId !== doctor.id) {
        return res.status(403).json({ error: 'Nem√°te opr√°vnƒõn√≠ upravit tento slot' })
      }
    }

    // Kontrola, zda nov√Ω ƒças nekoliduje s jin√Ωm slotem
    const tenantTimezone = await getCachedTenantTimezone(prisma, tenantId)
    const startTimeUTCForCheck = parseTimezoneDateTime(startTime, tenantTimezone)
    const endTimeUTCForCheck = parseTimezoneDateTime(endTime, tenantTimezone)
    
    if (startTimeUTCForCheck.getTime() !== existingSlot.startTime.getTime() || 
        endTimeUTCForCheck.getTime() !== existingSlot.endTime.getTime()) {
      const conflictingSlot = await prisma.slot.findFirst({
        where: {
          id: { not: id },
          doctorId: existingSlot.doctorId,
          startTime: startTimeUTCForCheck,
          endTime: endTimeUTCForCheck,
        },
      })

      if (conflictingSlot) {
        return res.status(409).json({ 
          error: `Slot pro tento ƒças u≈æ existuje (${startTimeUTCForCheck.toLocaleString('cs-CZ', { timeZone: 'Europe/Prague' })} - ${endTimeUTCForCheck.toLocaleString('cs-CZ', { timeZone: 'Europe/Prague' })})` 
        })
      }
    }

    // Timezone handling - p≈ôevedeme frontend ƒças na UTC podle tenant timezone
    const startTimeUTC = parseTimezoneDateTime(startTime, tenantTimezone)
    const endTimeUTC = parseTimezoneDateTime(endTime, tenantTimezone)
    
    console.log('Updating slot with timezone handling:')
    console.log('- tenantTimezone:', tenantTimezone)
    logTimezoneDebug('Original startTime', startTime)
    logTimezoneDebug('Parsed startTime UTC', startTimeUTC, tenantTimezone)
    logTimezoneDebug('Original endTime', endTime)
    logTimezoneDebug('Parsed endTime UTC', endTimeUTC, tenantTimezone)

    const updatedSlot = await prisma.slot.update({
      where: { id },
      data: {
        startTime: startTimeUTC,
        endTime: endTimeUTC,
        roomId: roomId || null,
        serviceTypeId: serviceTypeId || null,
        equipment,
      },
      include: {
        doctor: {
          include: {
            user: {
              select: {
                name: true,
              },
            },
          },
        },
        room: {
          select: {
            id: true,
            name: true,
            description: true,
          },
        },
        serviceType: {
          select: {
            id: true,
            name: true,
            description: true,
            duration: true,
            color: true,
          },
        },
        reservations: {
          include: {
            user: {
              select: {
                name: true,
                email: true,
              },
            },
          },
        },
      },
    })

    res.json(updatedSlot)
  } catch (error) {
    console.error('Chyba p≈ôi √∫pravƒõ slotu:', error)
    res.status(500).json({ error: 'Intern√≠ chyba serveru' })
  }
})

// Smaz√°n√≠ slotu
router.delete('/doctor/slots/:id', async (req: Request, res: Response) => {
  try {
    const userId = req.user?.sub
    const tenantId = req.user?.tenant
    const userRole = req.user?.role
    const { id } = req.params

    if (!userId || !tenantId) {
      return res.status(400).json({ error: 'Chyb√≠ u≈æivatelsk√© √∫daje' })
    }

    if (userRole !== 'DOCTOR' && userRole !== 'ADMIN') {
      return res.status(403).json({ error: 'Nedostateƒçn√° opr√°vnƒõn√≠' })
    }

    // Najdi slot a ovƒõ≈ô opr√°vnƒõn√≠
    const existingSlot = await prisma.slot.findFirst({
      where: { id, tenantId },
      include: { reservations: true },
    })

    if (!existingSlot) {
      return res.status(404).json({ error: 'Slot nenalezen' })
    }

    // Nelze smazat slot s rezervacemi
    if (existingSlot.reservations.length > 0) {
      return res.status(409).json({ error: 'Nelze smazat slot s existuj√≠c√≠mi rezervacemi' })
    }

    // Pro DOCTOR role ovƒõ≈ô, ≈æe je to jeho slot
    if (userRole === 'DOCTOR') {
      const doctor = await prisma.doctor.findFirst({
        where: { userId, tenantId },
      })

      if (!doctor || existingSlot.doctorId !== doctor.id) {
        return res.status(403).json({ error: 'Nem√°te opr√°vnƒõn√≠ smazat tento slot' })
      }
    }

    await prisma.slot.delete({
      where: { id },
    })

    res.json({ message: 'Slot byl √∫spƒõ≈°nƒõ smaz√°n' })
  } catch (error) {
    console.error('Chyba p≈ôi maz√°n√≠ slotu:', error)
    res.status(500).json({ error: 'Intern√≠ chyba serveru' })
  }
})

// === SPR√ÅVA REZERVAC√ç ===

// Z√≠sk√°n√≠ v≈°ech rezervac√≠ pro doktora/admina
router.get('/doctor/reservations', async (req: Request, res: Response) => {
  try {
    const userId = req.user?.sub
    const tenantId = req.user?.tenant
    const userRole = req.user?.role
    const { status } = req.query

    if (!userId || !tenantId) {
      return res.status(400).json({ error: 'Chyb√≠ u≈æivatelsk√© √∫daje' })
    }

    if (userRole !== 'DOCTOR' && userRole !== 'ADMIN') {
      return res.status(403).json({ error: 'Nedostateƒçn√° opr√°vnƒõn√≠' })
    }

    let whereCondition: any = { tenantId }

    // Filtrovat podle statusu pokud je zad√°n
    if (status && ['PENDING', 'CONFIRMED', 'CANCELLED', 'COMPLETED'].includes(status as string)) {
      whereCondition.status = status
    }

    if (userRole === 'DOCTOR') {
      // DOCTOR vid√≠ pouze sv√© rezervace
      const doctor = await prisma.doctor.findFirst({
        where: { userId, tenantId },
      })

      if (!doctor) {
        return res.status(404).json({ error: 'Profil doktora nenalezen' })
      }
      whereCondition.doctorId = doctor.id
    }

    const reservations = await prisma.reservation.findMany({
      where: whereCondition,
      include: {
        user: {
          select: {
            id: true,
            name: true,
            email: true,
            image: true,
          },
        },
        doctor: {
          include: {
            user: {
              select: {
                name: true,
              },
            },
          },
        },
        slot: {
          include: {
            room: {
              select: {
                name: true,
                description: true,
              },
            },
            serviceType: {
              select: {
                name: true,
                duration: true,
                color: true,
              },
            },
          },
        },
      },
      orderBy: [
        { status: 'asc' }, // PENDING prvn√≠
        { slot: { startTime: 'asc' } }, // pak podle ƒçasu
      ],
    })

    res.json(reservations)
  } catch (error) {
    console.error('Chyba p≈ôi naƒç√≠t√°n√≠ rezervac√≠:', error)
    res.status(500).json({ error: 'Intern√≠ chyba serveru' })
  }
})

// Aktualizace statusu rezervace
router.put('/doctor/reservations/:id/status', async (req: Request, res: Response) => {
  try {
    const userId = req.user?.sub
    const tenantId = req.user?.tenant
    const userRole = req.user?.role
    const { id } = req.params
    const { status, notes } = req.body

    if (!userId || !tenantId) {
      return res.status(400).json({ error: 'Chyb√≠ u≈æivatelsk√© √∫daje' })
    }

    if (userRole !== 'DOCTOR' && userRole !== 'ADMIN') {
      return res.status(403).json({ error: 'Nedostateƒçn√° opr√°vnƒõn√≠' })
    }

    if (!['PENDING', 'CONFIRMED', 'CANCELLED', 'COMPLETED'].includes(status)) {
      return res.status(400).json({ error: 'Neplatn√Ω status rezervace' })
    }

    // Najdi rezervaci a ovƒõ≈ô opr√°vnƒõn√≠
    const existingReservation = await prisma.reservation.findFirst({
      where: { id, tenantId },
      include: { doctor: true },
    })

    if (!existingReservation) {
      return res.status(404).json({ error: 'Rezervace nenalezena' })
    }

    // Pro DOCTOR role ovƒõ≈ô, ≈æe je to jeho rezervace
    if (userRole === 'DOCTOR') {
      const doctor = await prisma.doctor.findFirst({
        where: { userId, tenantId },
      })

      if (!doctor || existingReservation.doctorId !== doctor.id) {
        return res.status(403).json({ error: 'Nem√°te opr√°vnƒõn√≠ upravit tuto rezervaci' })
      }
    }

    const oldStatus = existingReservation.status
    const updatedReservation = await prisma.reservation.update({
      where: { id },
      data: {
        status,
        ...(notes && { description: notes }), // Aktualizuj pozn√°mky pokud jsou poskytnuty
      },
      include: {
        user: {
          select: {
            id: true,
            name: true,
            email: true,
            image: true,
          },
        },
        doctor: {
          include: {
            user: {
              select: {
                name: true,
              },
            },
          },
        },
        slot: {
          include: {
            room: {
              select: {
                name: true,
                description: true,
              },
            },
            serviceType: {
              select: {
                name: true,
                duration: true,
                color: true,
              },
            },
          },
        },
      },
    })

    // üìß Send notification about status change (doctor route)
    try {
      await notificationService.sendReservationStatusNotification({
        reservationId: id,
        tenantId: existingReservation.tenantId,
        oldStatus: oldStatus as any,
        newStatus: status as any,
        notifyBoth: status === 'CANCELLED' // Notify both for cancellations
      })
    } catch (notificationError) {
      console.error('‚ùå Failed to send doctor status change notification:', notificationError)
      // Don't fail the request if notification fails
    }

    res.json(updatedReservation)
  } catch (error) {
    console.error('Chyba p≈ôi √∫pravƒõ rezervace:', error)
    res.status(500).json({ error: 'Intern√≠ chyba serveru' })
  }
})

// P≈ôid√°n√≠ pozn√°mky k rezervaci
router.put('/doctor/reservations/:id/notes', async (req: Request, res: Response) => {
  try {
    const userId = req.user?.sub
    const tenantId = req.user?.tenant
    const userRole = req.user?.role
    const { id } = req.params
    const { notes } = req.body

    if (!userId || !tenantId) {
      return res.status(400).json({ error: 'Chyb√≠ u≈æivatelsk√© √∫daje' })
    }

    if (userRole !== 'DOCTOR' && userRole !== 'ADMIN') {
      return res.status(403).json({ error: 'Nedostateƒçn√° opr√°vnƒõn√≠' })
    }

    // Najdi rezervaci a ovƒõ≈ô opr√°vnƒõn√≠
    const existingReservation = await prisma.reservation.findFirst({
      where: { id, tenantId },
    })

    if (!existingReservation) {
      return res.status(404).json({ error: 'Rezervace nenalezena' })
    }

    // Pro DOCTOR role ovƒõ≈ô, ≈æe je to jeho rezervace
    if (userRole === 'DOCTOR') {
      const doctor = await prisma.doctor.findFirst({
        where: { userId, tenantId },
      })

      if (!doctor || existingReservation.doctorId !== doctor.id) {
        return res.status(403).json({ error: 'Nem√°te opr√°vnƒõn√≠ upravit tuto rezervaci' })
      }
    }

    const updatedReservation = await prisma.reservation.update({
      where: { id },
      data: { description: notes },
      include: {
        user: {
          select: {
            id: true,
            name: true,
            email: true,
            image: true,
          },
        },
        slot: {
          select: {
            startTime: true,
            endTime: true,
          },
        },
      },
    })

    res.json(updatedReservation)
  } catch (error) {
    console.error('Chyba p≈ôi √∫pravƒõ pozn√°mek:', error)
    res.status(500).json({ error: 'Intern√≠ chyba serveru' })
  }
})

// === SPR√ÅVA ROOMS (ORDINAC√ç) ===

// Z√≠sk√°n√≠ v≈°ech rooms
router.get('/rooms', async (req: Request, res: Response) => {
  try {
    const tenantId = req.user?.tenant
    const userRole = req.user?.role

    if (!tenantId) {
      return res.status(400).json({ error: 'Chyb√≠ tenant ID' })
    }

    if (userRole !== 'DOCTOR' && userRole !== 'ADMIN') {
      return res.status(403).json({ error: 'Nedostateƒçn√° opr√°vnƒõn√≠' })
    }

    const rooms = await prisma.room.findMany({
      where: { tenantId },
      orderBy: { name: 'asc' },
    })

    res.json(rooms)
  } catch (error) {
    console.error('Chyba p≈ôi naƒç√≠t√°n√≠ ordinac√≠:', error)
    res.status(500).json({ error: 'Intern√≠ chyba serveru' })
  }
})

// Vytvo≈ôen√≠ nov√© room
router.post('/rooms', async (req: Request, res: Response) => {
  try {
    const tenantId = req.user?.tenant
    const userRole = req.user?.role
    const { name, description, capacity, isActive } = req.body

    if (!tenantId) {
      return res.status(400).json({ error: 'Chyb√≠ tenant ID' })
    }

    if (userRole !== 'DOCTOR' && userRole !== 'ADMIN') {
      return res.status(403).json({ error: 'Nedostateƒçn√° opr√°vnƒõn√≠' })
    }

    if (!name) {
      return res.status(400).json({ error: 'N√°zev ordinace je povinn√Ω' })
    }

    const room = await prisma.room.create({
      data: {
        name,
        description,
        capacity: capacity || 1,
        isActive: isActive !== undefined ? isActive : true,
        tenantId,
      },
    })

    res.status(201).json(room)
  } catch (error) {
    console.error('Chyba p≈ôi vytv√°≈ôen√≠ ordinace:', error)
    res.status(500).json({ error: 'Intern√≠ chyba serveru' })
  }
})

// Aktualizace room
router.put('/rooms/:id', async (req: Request, res: Response) => {
  try {
    const tenantId = req.user?.tenant
    const userRole = req.user?.role
    const { id } = req.params
    const { name, description, capacity, isActive } = req.body

    if (!tenantId) {
      return res.status(400).json({ error: 'Chyb√≠ tenant ID' })
    }

    if (userRole !== 'DOCTOR' && userRole !== 'ADMIN') {
      return res.status(403).json({ error: 'Nedostateƒçn√° opr√°vnƒõn√≠' })
    }

    const existingRoom = await prisma.room.findFirst({
      where: { id, tenantId },
    })

    if (!existingRoom) {
      return res.status(404).json({ error: 'Ordinace nenalezena' })
    }

    const room = await prisma.room.update({
      where: { id },
      data: {
        name,
        description,
        capacity,
        isActive,
      },
    })

    res.json(room)
  } catch (error) {
    console.error('Chyba p≈ôi aktualizaci ordinace:', error)
    res.status(500).json({ error: 'Intern√≠ chyba serveru' })
  }
})

// === SPR√ÅVA SERVICE TYPES (DRUH≈Æ SLU≈ΩEB) ===

// Z√≠sk√°n√≠ v≈°ech service types
router.get('/service-types', async (req: Request, res: Response) => {
  try {
    const tenantId = req.user?.tenant
    const userRole = req.user?.role

    if (!tenantId) {
      return res.status(400).json({ error: 'Chyb√≠ tenant ID' })
    }

    if (userRole !== 'DOCTOR' && userRole !== 'ADMIN') {
      return res.status(403).json({ error: 'Nedostateƒçn√° opr√°vnƒõn√≠' })
    }

    const serviceTypes = await prisma.serviceType.findMany({
      where: { tenantId },
      orderBy: { name: 'asc' },
    })

    res.json(serviceTypes)
  } catch (error) {
    console.error('Chyba p≈ôi naƒç√≠t√°n√≠ druh≈Ø slu≈æeb:', error)
    res.status(500).json({ error: 'Intern√≠ chyba serveru' })
  }
})

// Vytvo≈ôen√≠ nov√©ho service type
router.post('/service-types', async (req: Request, res: Response) => {
  try {
    const tenantId = req.user?.tenant
    const userRole = req.user?.role
    const { name, description, duration, durationMinutes, price, color, isActive } = req.body

    if (!tenantId) {
      return res.status(400).json({ error: 'Chyb√≠ tenant ID' })
    }

    if (userRole !== 'DOCTOR' && userRole !== 'ADMIN') {
      return res.status(403).json({ error: 'Nedostateƒçn√° opr√°vnƒõn√≠' })
    }

    if (!name) {
      return res.status(400).json({ error: 'N√°zev slu≈æby je povinn√Ω' })
    }

    // Podpora pro oba form√°ty - duration nebo durationMinutes
    const finalDuration = durationMinutes || duration || 30

    const serviceType = await prisma.serviceType.create({
      data: {
        name,
        description,
        duration: finalDuration,
        price: price ? parseFloat(price) : null,
        color: color || '#3B82F6',
        isActive: isActive !== undefined ? isActive : true,
        tenantId,
      },
    })

    res.status(201).json(serviceType)
  } catch (error) {
    console.error('Chyba p≈ôi vytv√°≈ôen√≠ druhu slu≈æby:', error)
    res.status(500).json({ error: 'Intern√≠ chyba serveru' })
  }
})

// Aktualizace service type
router.put('/service-types/:id', async (req: Request, res: Response) => {
  try {
    const tenantId = req.user?.tenant
    const userRole = req.user?.role
    const { id } = req.params
    const { name, description, duration, durationMinutes, price, color, isActive } = req.body

    if (!tenantId) {
      return res.status(400).json({ error: 'Chyb√≠ tenant ID' })
    }

    if (userRole !== 'DOCTOR' && userRole !== 'ADMIN') {
      return res.status(403).json({ error: 'Nedostateƒçn√° opr√°vnƒõn√≠' })
    }

    const existingServiceType = await prisma.serviceType.findFirst({
      where: { id, tenantId },
    })

    if (!existingServiceType) {
      return res.status(404).json({ error: 'Druh slu≈æby nenalezen' })
    }

    // Podpora pro oba form√°ty - duration nebo durationMinutes
    const finalDuration = durationMinutes || duration

    const serviceType = await prisma.serviceType.update({
      where: { id },
      data: {
        name,
        description,
        duration: finalDuration,
        price: price ? parseFloat(price) : null,
        color,
        isActive,
      },
    })

    res.json(serviceType)
  } catch (error) {
    console.error('Chyba p≈ôi aktualizaci druhu slu≈æby:', error)
    res.status(500).json({ error: 'Intern√≠ chyba serveru' })
  }
})

// === SPR√ÅVA DOKTOR≈Æ ===

// Z√≠sk√°n√≠ v≈°ech doktor≈Ø (pouze pro ADMIN)
router.get('/doctors', async (req: Request, res: Response) => {
  try {
    const userId = req.user?.sub
    const tenantId = req.user?.tenant
    const userRole = req.user?.role

    if (!userId || !tenantId) {
      return res.status(400).json({ error: 'Chyb√≠ u≈æivatelsk√© √∫daje' })
    }

    if (userRole !== 'ADMIN') {
      return res.status(403).json({ error: 'Nedostateƒçn√° opr√°vnƒõn√≠ - pouze admin' })
    }

    const doctors = await prisma.doctor.findMany({
      where: { tenantId },
      include: {
        user: {
          select: {
            id: true,
            name: true,
            email: true,
            image: true,
          },
        },
      },
      orderBy: {
        user: {
          name: 'asc',
        },
      },
    })

    res.json(doctors)
  } catch (error) {
    console.error('Chyba p≈ôi naƒç√≠t√°n√≠ doktor≈Ø:', error)
    res.status(500).json({ error: 'Intern√≠ chyba serveru' })
  }
})

// === BULK GENEROV√ÅN√ç SLOT≈Æ ===

// Bulk generov√°n√≠ slot≈Ø podle rozvrhu
router.post('/doctor/slots/bulk-generate', bulkOperationLimit, validateBulkSlotGeneration, async (req: Request, res: Response) => {
  try {
    const userId = req.user?.sub
    const tenantId = req.user?.tenant
    const userRole = req.user?.role
    const { 
      weekdays, 
      startTime, 
      endTime, 
      interval, 
      serviceTypeId, 
      roomId, 
      weeksCount, 
      startDate, 
      breakTimes = [],
      doctorId 
    } = req.body

    // BEZPEƒåNOST: Rate limiting check
    if (weeksCount > 52) {
      return res.status(400).json({ error: 'Maxim√°ln√≠ poƒçet t√Ωdn≈Ø je 52' })
    }

    // BEZPEƒåNOST: Limit na poƒçet generovan√Ωch slot≈Ø
    const estimatedSlots = weekdays.length * weeksCount * (Math.floor(480 / Math.max(interval, 15)))
    if (estimatedSlots > 1000) {
      return res.status(400).json({ error: 'P≈ô√≠li≈° mnoho slot≈Ø k vygenerov√°n√≠. Sni≈æte poƒçet t√Ωdn≈Ø nebo zvy≈°te interval.' })
    }

    console.log('=== DEBUG: Bulk slot generation ===')
    console.log('userId:', userId)
    console.log('tenantId:', tenantId)
    console.log('userRole:', userRole)
    // BEZPEƒåNOST: Nelogovat citliv√© parametry
    console.log('estimatedSlots:', estimatedSlots)

    if (!userId || !tenantId) {
      return res.status(400).json({ error: 'Chyb√≠ u≈æivatelsk√© √∫daje' })
    }

    if (userRole !== 'DOCTOR' && userRole !== 'ADMIN') {
      return res.status(403).json({ error: 'Nedostateƒçn√° opr√°vnƒõn√≠' })
    }

    // Validace povinn√Ωch parametr≈Ø
    if (!weekdays || !Array.isArray(weekdays) || weekdays.length === 0) {
      return res.status(400).json({ error: 'Dny v t√Ωdnu jsou povinn√©' })
    }

    if (!startTime || !endTime || !weeksCount || !startDate) {
      return res.status(400).json({ error: 'V≈°echny ƒçasov√© parametry jsou povinn√©' })
    }

    if (interval < 0 || interval > 480) { // min 0 (nep≈ôetr≈æit√Ω), max 8 hodin
      return res.status(400).json({ error: 'Interval mus√≠ b√Ωt mezi 0-480 minutami' })
    }

    if (weeksCount <= 0 || weeksCount > 52) { // max rok
      return res.status(400).json({ error: 'Poƒçet t√Ωdn≈Ø mus√≠ b√Ωt mezi 1-52' })
    }

    // Urƒçen√≠ target doktora
    let targetDoctorId: string

    if (userRole === 'ADMIN') {
      if (doctorId) {
        const doctor = await prisma.doctor.findFirst({
          where: { id: doctorId, tenantId },
        })
        if (!doctor) {
          return res.status(404).json({ error: 'Specifikovan√Ω doktor nenalezen' })
        }
        targetDoctorId = doctorId
      } else {
        const firstDoctor = await prisma.doctor.findFirst({
          where: { tenantId },
        })
        if (!firstDoctor) {
          return res.status(404).json({ error: '≈Ω√°dn√Ω doktor nenalezen v t√©to ordinaci' })
        }
        targetDoctorId = firstDoctor.id
      }
    } else {
      const doctor = await prisma.doctor.findFirst({
        where: { userId, tenantId },
      })
      if (!doctor) {
        return res.status(404).json({ error: 'Profil doktora nenalezen' })
      }
      targetDoctorId = doctor.id
    }

    // Timezone handling
    const tenantTimezone = await getCachedTenantTimezone(prisma, tenantId)
    
    // Z√≠skej d√©lku slu≈æby pro inteligentn√≠ sloty
    let serviceTypeDuration: number | undefined = undefined
    if (serviceTypeId) {
      const serviceType = await prisma.serviceType.findFirst({
        where: { id: serviceTypeId, tenantId },
        select: { duration: true }
      })
      serviceTypeDuration = serviceType?.duration || undefined
      console.log(`üîß Slu≈æba m√° d√©lku: ${serviceTypeDuration} minut`)
    }
    
    // Generov√°n√≠ slot≈Ø
    const slotsToCreate = []
    const conflicts = []
    
    const baseDate = new Date(startDate)
    
    for (let week = 0; week < weeksCount; week++) {
      for (const weekday of weekdays) {
        // Najdi prvn√≠ v√Ωskyt dan√©ho dne v t√Ωdnu
        const targetDate = new Date(baseDate)
        const daysToAdd = (weekday - baseDate.getDay() + 7) % 7 + (week * 7)
        targetDate.setDate(baseDate.getDate() + daysToAdd)
        
        const dateStr = targetDate.toISOString().split('T')[0] // YYYY-MM-DD
        
        // Generuj sloty pro tento den s inteligentn√≠ logikou
        const daySlots = generateDaySlots(
          dateStr, 
          startTime, 
          endTime, 
          interval, 
          breakTimes, 
          tenantTimezone,
          serviceTypeDuration
        )
        
        for (const slotTime of daySlots) {
          const slotData = {
            doctorId: targetDoctorId,
            startTime: slotTime.start,
            endTime: slotTime.end,
            roomId: roomId || null,
            serviceTypeId: serviceTypeId || null,
            tenantId,
          }
          
          // Kontrola konflikt≈Ø
          const existingSlot = await prisma.slot.findFirst({
            where: {
              doctorId: targetDoctorId,
              startTime: slotTime.start,
              endTime: slotTime.end,
            },
          })
          
          if (existingSlot) {
            conflicts.push({
              date: dateStr,
              startTime: slotTime.start.toLocaleString('cs-CZ', { timeZone: tenantTimezone }),
              endTime: slotTime.end.toLocaleString('cs-CZ', { timeZone: tenantTimezone }),
            })
          } else {
            slotsToCreate.push(slotData)
          }
        }
      }
    }
    
    console.log(`Generated ${slotsToCreate.length} slots, ${conflicts.length} conflicts`)
    
    // Vytvo≈ôen√≠ slot≈Ø v datab√°zi
    const createdSlots = []
    for (const slotData of slotsToCreate) {
      const slot = await prisma.slot.create({
        data: slotData,
        include: {
          doctor: {
            include: {
              user: {
                select: {
                  name: true,
                },
              },
            },
          },
          room: true,
          serviceType: true,
        },
      })
      createdSlots.push(slot)
    }
    
    res.status(201).json({
      message: `√öspƒõ≈°nƒõ vygenerov√°no ${createdSlots.length} slot≈Ø`,
      createdCount: createdSlots.length,
      conflictsCount: conflicts.length,
      conflicts,
      slots: createdSlots,
    })
    
  } catch (error) {
    console.error('Chyba p≈ôi bulk generov√°n√≠ slot≈Ø:', error)
    res.status(500).json({ error: 'Intern√≠ chyba serveru' })
  }
})

// Helper funkce pro generov√°n√≠ slot≈Ø pro jeden den
function generateDaySlots(
  dateStr: string, 
  startTime: string, 
  endTime: string, 
  interval: number, 
  breakTimes: Array<{start: string, end: string}>, 
  timezone: any,
  serviceTypeDuration?: number
) {
  const slots = []
  
  // Urƒçen√≠ skuteƒçn√© d√©lky slotu
  const actualSlotDuration = serviceTypeDuration || interval || 30 // fallback na 30 min
  const stepInterval = interval || actualSlotDuration // interval pro posun zaƒç√°tk≈Ø
  
  // Speci√°ln√≠ p≈ô√≠pad: interval 0 = jeden nep≈ôetr≈æit√Ω slot
  if (interval === 0) {
    const slotStart = parseTimezoneDateTime(`${dateStr}T${startTime}:00`, timezone)
    const slotEnd = parseTimezoneDateTime(`${dateStr}T${endTime}:00`, timezone)
    
    // Kontrola, jestli cel√Ω rozsah nekoliduje s p≈ôest√°vkou
    let isInBreak = false
    for (const breakTime of breakTimes) {
      if (startTime >= breakTime.start && startTime < breakTime.end) {
        isInBreak = true
        break
      }
    }
    
    if (!isInBreak) {
      slots.push({
        start: slotStart,
        end: slotEnd,
      })
    }
    return slots
  }
  
  // Parse start a end ƒçasu
  const [startHour, startMin] = startTime.split(':').map(Number)
  const [endHour, endMin] = endTime.split(':').map(Number)
  
  // Vytvo≈ô Date objekty pro zaƒç√°tek a konec
  const currentSlot = parseTimezoneDateTime(`${dateStr}T${startTime}:00`, timezone)
  const endOfDay = parseTimezoneDateTime(`${dateStr}T${endTime}:00`, timezone)
  
  console.log(`üß† Inteligentn√≠ sloty: slu≈æba=${actualSlotDuration}min, interval=${stepInterval}min`)
  
  while (currentSlot < endOfDay) {
    // INTELIGENTN√ç SLOTY: D√©lka slotu podle slu≈æby, interval podle nastaven√≠
    const slotEnd = new Date(currentSlot.getTime() + actualSlotDuration * 60 * 1000)
    
    // Slot nesm√≠ p≈ôesahovat konec pracovn√≠ doby
    if (slotEnd > endOfDay) break
    
    // Kontrola, jestli slot nekoliduje s p≈ôest√°vkou
    const slotStartTime = currentSlot.toLocaleTimeString('en-GB', { 
      timeZone: timezone, 
      hour12: false, 
      hour: '2-digit', 
      minute: '2-digit' 
    })
    const slotEndTime = slotEnd.toLocaleTimeString('en-GB', { 
      timeZone: timezone, 
      hour12: false, 
      hour: '2-digit', 
      minute: '2-digit' 
    })
    
    // Kontrola p≈ôest√°vek - slot nesm√≠ zaƒç√≠nat v p≈ôest√°vce
    let isInBreak = false
    for (const breakTime of breakTimes) {
      if (slotStartTime >= breakTime.start && slotStartTime < breakTime.end) {
        isInBreak = true
        break
      }
      // Tak√© zkontroluj, jestli slot nezasahuje do p≈ôest√°vky
      if (slotStartTime < breakTime.start && slotEndTime > breakTime.start) {
        isInBreak = true
        break
      }
    }
    
    if (!isInBreak) {
      slots.push({
        start: new Date(currentSlot),
        end: new Date(slotEnd),
      })
      console.log(`‚úÖ Slot vytvo≈ôen: ${slotStartTime}-${slotEndTime} (${actualSlotDuration}min)`)
    } else {
      console.log(`‚è∏Ô∏è Slot p≈ôeskoƒçen (p≈ôest√°vka): ${slotStartTime}-${slotEndTime}`)
    }
    
    // P≈ôejdi na dal≈°√≠ slot podle step intervalu (ne podle d√©lky slotu!)
    currentSlot.setTime(currentSlot.getTime() + stepInterval * 60 * 1000)
  }
  
  return slots
}

// === NOTIFIKACE A TESTING ===

// Test endpoint pro notifikace (pouze pro ADMIN)
router.post('/test/notifications', async (req: Request, res: Response) => {
  try {
    const userId = req.user?.sub
    const tenantId = req.user?.tenant
    const userRole = req.user?.role

    if (!userId || !tenantId) {
      return res.status(400).json({ error: 'Chyb√≠ u≈æivatelsk√© √∫daje' })
    }

    if (userRole !== 'ADMIN') {
      return res.status(403).json({ error: 'Nedostateƒçn√° opr√°vnƒõn√≠ - pouze admin' })
    }

    console.log('üß™ Testing notification system...')
    
    const testResult = await notificationService.testNotifications()
    
    res.json({
      success: testResult,
      message: testResult ? 'Notifikace funguj√≠ spr√°vnƒõ' : 'Chyba v notifikaƒçn√≠m syst√©mu',
      timestamp: new Date().toISOString()
    })
  } catch (error) {
    console.error('Chyba p≈ôi testov√°n√≠ notifikac√≠:', error)
    res.status(500).json({ error: 'Intern√≠ chyba serveru' })
  }
})

// Manu√°ln√≠ spu≈°tƒõn√≠ reminder notifikac√≠ (pouze pro ADMIN)
router.post('/notifications/send-reminders', async (req: Request, res: Response) => {
  try {
    const userId = req.user?.sub
    const tenantId = req.user?.tenant
    const userRole = req.user?.role

    if (!userId || !tenantId) {
      return res.status(400).json({ error: 'Chyb√≠ u≈æivatelsk√© √∫daje' })
    }

    if (userRole !== 'ADMIN') {
      return res.status(403).json({ error: 'Nedostateƒçn√° opr√°vnƒõn√≠ - pouze admin' })
    }

    console.log('üìß Manually triggering reminder notifications...')
    
    const sentCount = await notificationService.sendReservationReminders()
    
    res.json({
      success: true,
      sentCount,
      message: `Odesl√°no ${sentCount} p≈ôipom√≠nek`,
      timestamp: new Date().toISOString()
    })
  } catch (error) {
    console.error('Chyba p≈ôi odes√≠l√°n√≠ p≈ôipom√≠nek:', error)
    res.status(500).json({ error: 'Intern√≠ chyba serveru' })
  }
})

export default router
