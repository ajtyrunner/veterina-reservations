import { Router } from 'express'
import { PrismaClient } from '@prisma/client'
import bcrypt from 'bcryptjs'

const router = Router()
const prisma = new PrismaClient()

// Endpoint pro NextAuth credentials ovƒõ≈ôen√≠
router.post('/credentials', async (req, res) => {
  console.log('üîê AUTH REQUEST:', {
    email: req.body.email,
    tenantSlug: req.body.tenantSlug,
    hasPassword: !!req.body.password
  })
  
  try {
    const { email, password, tenantSlug } = req.body

    if (!email || !password) {
      console.log('‚ùå Chyb√≠ email nebo heslo')
      return res.status(400).json({ error: 'Email a heslo jsou povinn√©' })
    }

    // Najdi u≈æivatele v datab√°zi (s heslem pro ovƒõ≈ôen√≠)
    const userRecord = await prisma.user.findUnique({
      where: { email },
      include: {
        tenant: {
          select: {
            slug: true
          }
        }
      }
    })
    
    console.log('üîç User found:', userRecord ? 'YES' : 'NO')

    if (!userRecord || !userRecord.password) {
      console.log('‚ùå User not found or no password')
      return res.status(401).json({ error: 'Neplatn√© p≈ôihla≈°ovac√≠ √∫daje' })
    }

    // Ovƒõ≈ô heslo
    console.log('üîë Checking password...')
    const passwordMatch = await bcrypt.compare(password, userRecord.password)
    console.log('üîë Password match:', passwordMatch ? 'YES' : 'NO')
    
    if (!passwordMatch) {
      console.log('‚ùå Password mismatch')
      return res.status(401).json({ error: 'Neplatn√© p≈ôihla≈°ovac√≠ √∫daje' })
    }

    // Ovƒõ≈ô, ≈æe se p≈ôihla≈°uje ke spr√°vn√©mu tenantovi
    if (tenantSlug && userRecord.tenant.slug !== tenantSlug) {
      return res.status(401).json({ error: 'Nepat≈ô√≠te k t√©to ordinaci' })
    }

    // Pouze dokto≈ôi a admini m≈Ø≈æou pou≈æ√≠vat credentials
    if (userRecord.role !== 'DOCTOR' && userRecord.role !== 'ADMIN') {
      return res.status(403).json({ error: 'Nedostateƒçn√° opr√°vnƒõn√≠' })
    }

    // Vra≈• √∫daje pro NextAuth
    console.log('‚úÖ Auth successful for:', userRecord.email)
    res.json({
      id: userRecord.id,
      email: userRecord.email,
      name: userRecord.name,
      image: userRecord.image,
      role: userRecord.role,
      tenant: userRecord.tenant.slug,
      tenantId: userRecord.tenantId,
    })
  } catch (error) {
    console.error('Chyba p≈ôi ovƒõ≈ôov√°n√≠ credentials:', error)
    res.status(500).json({ error: 'Intern√≠ chyba serveru' })
  }
})

// Vytvo≈ôen√≠ u≈æivatele pro Google OAuth
router.post('/google-user', async (req, res) => {
  try {
    const { email, name, image, tenantSlug } = req.body

    if (!email) {
      return res.status(400).json({ error: 'Email je povinn√Ω' })
    }

    // Najdi tenant
    const tenant = await prisma.tenant.findUnique({
      where: { slug: tenantSlug || 'svahy' },
    })

    if (!tenant) {
      return res.status(404).json({ error: 'Tenant nenalezen' })
    }

    // Zkontroluj, jestli u≈æivatel u≈æ existuje
    const existingUser = await prisma.user.findUnique({
      where: { email },
    })

    if (existingUser) {
      // Ovƒõ≈ô, ≈æe pat≈ô√≠ ke spr√°vn√©mu tenantovi
      if (existingUser.tenantId === tenant.id) {
        return res.json({ success: true })
      } else {
        return res.status(403).json({ error: 'U≈æivatel pat≈ô√≠ k jin√©mu tenantovi' })
      }
    }

    // Vytvo≈ô nov√©ho u≈æivatele
    await prisma.user.create({
      data: {
        email,
        name,
        image,
        tenantId: tenant.id,
        role: 'CLIENT',
      },
    })

    res.json({ success: true })
  } catch (error) {
    console.error('Chyba p≈ôi vytv√°≈ôen√≠ Google u≈æivatele:', error)
    res.status(500).json({ error: 'Intern√≠ chyba serveru' })
  }
})

// Naƒçten√≠ informac√≠ o u≈æivateli
router.post('/user-info', async (req, res) => {
  try {
    const { email } = req.body

    if (!email) {
      return res.status(400).json({ error: 'Email je povinn√Ω' })
    }

    const user = await prisma.user.findUnique({
      where: { email },
      include: { 
        tenant: true, 
        doctor: true 
      },
    })

    if (!user) {
      return res.status(404).json({ error: 'U≈æivatel nenalezen' })
    }

    res.json({
      id: user.id,
      role: user.role,
      tenant: user.tenant.slug,
      tenantId: user.tenantId,
      isDoctor: !!user.doctor,
    })
  } catch (error) {
    console.error('Chyba p≈ôi naƒç√≠t√°n√≠ u≈æivatele:', error)
    res.status(500).json({ error: 'Intern√≠ chyba serveru' })
  }
})

export default router 